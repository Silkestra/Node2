
GccApplication1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002078  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  00082078  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004a0  20000848  000828c0  00020844  2**3
                  ALLOC
  3 .stack        00000400  20000ce8  00082d60  00020844  2**0
                  ALLOC
  4 .heap         00000200  200010e8  00083160  00020844  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002086d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005250  00000000  00000000  000208c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000da8  00000000  00000000  00025b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b47  00000000  00000000  000268be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001f8  00000000  00000000  00027405  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  000275fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00011fcc  00000000  00000000  00027795  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003176  00000000  00000000  00039761  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000556be  00000000  00000000  0003c8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000dfc  00000000  00000000  00091f98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 10 00 20 4d 02 08 00 49 02 08 00 49 02 08 00     ... M...I...I...
   80010:	49 02 08 00 49 02 08 00 49 02 08 00 00 00 00 00     I...I...I.......
	...
   8002c:	49 02 08 00 49 02 08 00 00 00 00 00 49 02 08 00     I...I.......I...
   8003c:	0d 04 08 00 49 02 08 00 49 02 08 00 49 02 08 00     ....I...I...I...
   8004c:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...
   8005c:	49 02 08 00 fd 04 08 00 49 02 08 00 00 00 00 00     I.......I.......
   8006c:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...
	...
   80084:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...
   80094:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...
   800a4:	00 00 00 00 49 02 08 00 49 02 08 00 49 02 08 00     ....I...I...I...
   800b4:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...
   800c4:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...
   800d4:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...
   800e4:	49 02 08 00 49 02 08 00 49 02 08 00 49 02 08 00     I...I...I...I...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000848 	.word	0x20000848
   80110:	00000000 	.word	0x00000000
   80114:	00082078 	.word	0x00082078

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00082078 	.word	0x00082078
   80154:	2000084c 	.word	0x2000084c
   80158:	00082078 	.word	0x00082078
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:


#define txMailbox 0
#define rxMailbox 1

void can_init(CanInit init, uint8_t rxInterrupt){
   80160:	b410      	push	{r4}
    // Disable CAN
    CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80162:	4b22      	ldr	r3, [pc, #136]	; (801ec <can_init+0x8c>)
   80164:	681a      	ldr	r2, [r3, #0]
   80166:	f022 0201 	bic.w	r2, r2, #1
   8016a:	601a      	str	r2, [r3, #0]
    
    // Clear status register by reading it
    __attribute__((unused)) uint32_t ul_status = CAN0->CAN_SR;     
   8016c:	691a      	ldr	r2, [r3, #16]
    
    // Disable interrupts on CANH and CANL pins
    PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8016e:	4a20      	ldr	r2, [pc, #128]	; (801f0 <can_init+0x90>)
   80170:	f44f 7440 	mov.w	r4, #768	; 0x300
   80174:	6454      	str	r4, [r2, #68]	; 0x44
    
    // Select CAN0 RX and TX in PIOA
    PIOA->PIO_ABSR &= ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   80176:	6f14      	ldr	r4, [r2, #112]	; 0x70
   80178:	f024 0403 	bic.w	r4, r4, #3
   8017c:	6714      	str	r4, [r2, #112]	; 0x70
    
    // Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
    PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   8017e:	2403      	movs	r4, #3
   80180:	6054      	str	r4, [r2, #4]
    
    // Enable pull up on CANH and CANL pin
    PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);    
   80182:	6654      	str	r4, [r2, #100]	; 0x64
    
    // Enable Clock for CAN0 in PMC
    // DIV = 1 (can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
    PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); 
   80184:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
   80188:	4c1a      	ldr	r4, [pc, #104]	; (801f4 <can_init+0x94>)
   8018a:	f8c2 410c 	str.w	r4, [r2, #268]	; 0x10c
    PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   8018e:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
   80192:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   80196:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
    
    //Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	//CAN0->CAN_WPMR = 0x0;
	CAN0->CAN_BR = init.reg; //(init.propag << CAN_BR_PROPAG_Pos) | (init.phase1 << CAN_BR_PHASE1_Pos) | (init.phase2 << CAN_BR_PHASE2_Pos) | (init.sjw << CAN_BR_SJW_Pos) | (init.brp << CAN_BR_BRP_Pos) | (CAN_BR_SMP);
   8019a:	6158      	str	r0, [r3, #20]

    // Configure mailboxes
    // transmit
    CAN0->CAN_MB[txMailbox].CAN_MID = 0;//CAN_MID_MIDE;
   8019c:	2200      	movs	r2, #0
   8019e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    CAN0->CAN_MB[txMailbox].CAN_MMR = CAN_MMR_MOT_MB_TX;
   801a2:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   801a6:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    
    // receive
    CAN0->CAN_MB[rxMailbox].CAN_MAM = 0; // Accept all messages
   801aa:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    CAN0->CAN_MB[rxMailbox].CAN_MID = CAN_MID_MIDE;
   801ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   801b2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    CAN0->CAN_MB[rxMailbox].CAN_MMR = CAN_MMR_MOT_MB_RX;
   801b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   801ba:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    CAN0->CAN_MB[rxMailbox].CAN_MCR |= CAN_MCR_MTCR;
   801be:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
   801c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   801c6:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    if(rxInterrupt){
   801ca:	b141      	cbz	r1, 801de <can_init+0x7e>
        // Enable interrupt on receive
        CAN0->CAN_IER |= (1 << rxMailbox); 
   801cc:	461a      	mov	r2, r3
   801ce:	685b      	ldr	r3, [r3, #4]
   801d0:	f043 0302 	orr.w	r3, r3, #2
   801d4:	6053      	str	r3, [r2, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   801d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   801da:	4b07      	ldr	r3, [pc, #28]	; (801f8 <can_init+0x98>)
   801dc:	605a      	str	r2, [r3, #4]
        // Enable interrupt in NVIC 
        NVIC_EnableIRQ(ID_CAN0);
    }

    // Enable CAN
    CAN0->CAN_MR |= CAN_MR_CANEN;
   801de:	4a03      	ldr	r2, [pc, #12]	; (801ec <can_init+0x8c>)
   801e0:	6813      	ldr	r3, [r2, #0]
   801e2:	f043 0301 	orr.w	r3, r3, #1
   801e6:	6013      	str	r3, [r2, #0]
}
   801e8:	bc10      	pop	{r4}
   801ea:	4770      	bx	lr
   801ec:	400b4000 	.word	0x400b4000
   801f0:	400e0e00 	.word	0x400e0e00
   801f4:	1000102b 	.word	0x1000102b
   801f8:	e000e100 	.word	0xe000e100

000801fc <can_tx>:
		can_cntrl_write(TXB0D0+i, msg->data[i]);
	}
	can_cntrl_RTS(0x01);
}*/

void can_tx(CanMsg m){
   801fc:	b084      	sub	sp, #16
   801fe:	ab04      	add	r3, sp, #16
   80200:	e903 0007 	stmdb	r3, {r0, r1, r2}
    while(!(CAN0->CAN_MB[txMailbox].CAN_MSR & CAN_MSR_MRDY)){}
   80204:	4b0f      	ldr	r3, [pc, #60]	; (80244 <can_tx+0x48>)
   80206:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8020a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8020e:	d0f9      	beq.n	80204 <can_tx+0x8>
    
    // Set message ID and use CAN 2.0B protocol
    CAN0->CAN_MB[txMailbox].CAN_MID = CAN_MID_MIDvA(m.id) | CAN_MID_MIDE ;
   80210:	f89d 3004 	ldrb.w	r3, [sp, #4]
   80214:	049b      	lsls	r3, r3, #18
   80216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8021a:	4a0a      	ldr	r2, [pc, #40]	; (80244 <can_tx+0x48>)
   8021c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        
    // Coerce maximum 8 byte length
    m.length = m.length > 8 ? 8 : m.length;
   80220:	f89d 3005 	ldrb.w	r3, [sp, #5]
   80224:	2b08      	cmp	r3, #8
   80226:	bf28      	it	cs
   80228:	2308      	movcs	r3, #8
    
    //  Put message in can data registers
    CAN0->CAN_MB[txMailbox].CAN_MDL = m.dword[0];
   8022a:	9902      	ldr	r1, [sp, #8]
   8022c:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
    CAN0->CAN_MB[txMailbox].CAN_MDH = m.dword[1];
   80230:	9903      	ldr	r1, [sp, #12]
   80232:	f8c2 1218 	str.w	r1, [r2, #536]	; 0x218
        
    // Set message length and mailbox ready to send
    CAN0->CAN_MB[txMailbox].CAN_MCR = (m.length << CAN_MCR_MDLC_Pos) | CAN_MCR_MTCR;
   80236:	041b      	lsls	r3, r3, #16
   80238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8023c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
}
   80240:	b004      	add	sp, #16
   80242:	4770      	bx	lr
   80244:	400b4000 	.word	0x400b4000

00080248 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80248:	e7fe      	b.n	80248 <Dummy_Handler>
	...

0008024c <Reset_Handler>:
{
   8024c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8024e:	4b11      	ldr	r3, [pc, #68]	; (80294 <Reset_Handler+0x48>)
   80250:	4a11      	ldr	r2, [pc, #68]	; (80298 <Reset_Handler+0x4c>)
   80252:	429a      	cmp	r2, r3
   80254:	d009      	beq.n	8026a <Reset_Handler+0x1e>
   80256:	4b0f      	ldr	r3, [pc, #60]	; (80294 <Reset_Handler+0x48>)
   80258:	4a0f      	ldr	r2, [pc, #60]	; (80298 <Reset_Handler+0x4c>)
   8025a:	e003      	b.n	80264 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   8025c:	6811      	ldr	r1, [r2, #0]
   8025e:	6019      	str	r1, [r3, #0]
   80260:	3304      	adds	r3, #4
   80262:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80264:	490d      	ldr	r1, [pc, #52]	; (8029c <Reset_Handler+0x50>)
   80266:	428b      	cmp	r3, r1
   80268:	d3f8      	bcc.n	8025c <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   8026a:	4b0d      	ldr	r3, [pc, #52]	; (802a0 <Reset_Handler+0x54>)
   8026c:	e002      	b.n	80274 <Reset_Handler+0x28>
                *pDest++ = 0;
   8026e:	2200      	movs	r2, #0
   80270:	601a      	str	r2, [r3, #0]
   80272:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80274:	4a0b      	ldr	r2, [pc, #44]	; (802a4 <Reset_Handler+0x58>)
   80276:	4293      	cmp	r3, r2
   80278:	d3f9      	bcc.n	8026e <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8027a:	4b0b      	ldr	r3, [pc, #44]	; (802a8 <Reset_Handler+0x5c>)
   8027c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80280:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80284:	4a09      	ldr	r2, [pc, #36]	; (802ac <Reset_Handler+0x60>)
   80286:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80288:	4b09      	ldr	r3, [pc, #36]	; (802b0 <Reset_Handler+0x64>)
   8028a:	4798      	blx	r3
        main();
   8028c:	4b09      	ldr	r3, [pc, #36]	; (802b4 <Reset_Handler+0x68>)
   8028e:	4798      	blx	r3
   80290:	e7fe      	b.n	80290 <Reset_Handler+0x44>
   80292:	bf00      	nop
   80294:	20000000 	.word	0x20000000
   80298:	00082078 	.word	0x00082078
   8029c:	20000844 	.word	0x20000844
   802a0:	20000848 	.word	0x20000848
   802a4:	20000ce8 	.word	0x20000ce8
   802a8:	00080000 	.word	0x00080000
   802ac:	e000ed00 	.word	0xe000ed00
   802b0:	000805dd 	.word	0x000805dd
   802b4:	0008035d 	.word	0x0008035d

000802b8 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   802b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   802bc:	4a20      	ldr	r2, [pc, #128]	; (80340 <SystemInit+0x88>)
   802be:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   802c0:	f502 7200 	add.w	r2, r2, #512	; 0x200
   802c4:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   802c6:	4b1f      	ldr	r3, [pc, #124]	; (80344 <SystemInit+0x8c>)
   802c8:	6a1b      	ldr	r3, [r3, #32]
   802ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   802ce:	d107      	bne.n	802e0 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   802d0:	4a1d      	ldr	r2, [pc, #116]	; (80348 <SystemInit+0x90>)
   802d2:	4b1c      	ldr	r3, [pc, #112]	; (80344 <SystemInit+0x8c>)
   802d4:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   802d6:	4b1b      	ldr	r3, [pc, #108]	; (80344 <SystemInit+0x8c>)
   802d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   802da:	f013 0f01 	tst.w	r3, #1
   802de:	d0fa      	beq.n	802d6 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   802e0:	4a1a      	ldr	r2, [pc, #104]	; (8034c <SystemInit+0x94>)
   802e2:	4b18      	ldr	r3, [pc, #96]	; (80344 <SystemInit+0x8c>)
   802e4:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   802e6:	4b17      	ldr	r3, [pc, #92]	; (80344 <SystemInit+0x8c>)
   802e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   802ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   802ee:	d0fa      	beq.n	802e6 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   802f0:	4a14      	ldr	r2, [pc, #80]	; (80344 <SystemInit+0x8c>)
   802f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   802f4:	f023 0303 	bic.w	r3, r3, #3
   802f8:	f043 0301 	orr.w	r3, r3, #1
   802fc:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   802fe:	4b11      	ldr	r3, [pc, #68]	; (80344 <SystemInit+0x8c>)
   80300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80302:	f013 0f08 	tst.w	r3, #8
   80306:	d0fa      	beq.n	802fe <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80308:	4a11      	ldr	r2, [pc, #68]	; (80350 <SystemInit+0x98>)
   8030a:	4b0e      	ldr	r3, [pc, #56]	; (80344 <SystemInit+0x8c>)
   8030c:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8030e:	4b0d      	ldr	r3, [pc, #52]	; (80344 <SystemInit+0x8c>)
   80310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80312:	f013 0f02 	tst.w	r3, #2
   80316:	d0fa      	beq.n	8030e <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80318:	2211      	movs	r2, #17
   8031a:	4b0a      	ldr	r3, [pc, #40]	; (80344 <SystemInit+0x8c>)
   8031c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8031e:	4b09      	ldr	r3, [pc, #36]	; (80344 <SystemInit+0x8c>)
   80320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80322:	f013 0f08 	tst.w	r3, #8
   80326:	d0fa      	beq.n	8031e <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80328:	2212      	movs	r2, #18
   8032a:	4b06      	ldr	r3, [pc, #24]	; (80344 <SystemInit+0x8c>)
   8032c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8032e:	4b05      	ldr	r3, [pc, #20]	; (80344 <SystemInit+0x8c>)
   80330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80332:	f013 0f08 	tst.w	r3, #8
   80336:	d0fa      	beq.n	8032e <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80338:	4a06      	ldr	r2, [pc, #24]	; (80354 <SystemInit+0x9c>)
   8033a:	4b07      	ldr	r3, [pc, #28]	; (80358 <SystemInit+0xa0>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	4770      	bx	lr
   80340:	400e0a00 	.word	0x400e0a00
   80344:	400e0600 	.word	0x400e0600
   80348:	00370809 	.word	0x00370809
   8034c:	01370809 	.word	0x01370809
   80350:	200d3f01 	.word	0x200d3f01
   80354:	0501bd00 	.word	0x0501bd00
   80358:	20000000 	.word	0x20000000

0008035c <main>:
#include "can.h"
#include "sam.h"
#include "uart.h"

int main(void)
{
   8035c:	b500      	push	{lr}
   8035e:	b085      	sub	sp, #20
	SystemInit();
   80360:	4b17      	ldr	r3, [pc, #92]	; (803c0 <main+0x64>)
   80362:	4798      	blx	r3
	uart_init(F_CPU,BAUDRATE);
   80364:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   80368:	4816      	ldr	r0, [pc, #88]	; (803c4 <main+0x68>)
   8036a:	4b17      	ldr	r3, [pc, #92]	; (803c8 <main+0x6c>)
   8036c:	4798      	blx	r3
	/*REG_PMC_PCER0 |= (1 << ID_PIOB);
    REG_PIOB_PER = (1 << 13);
	REG_PIOB_OER = (1 << 13);
	*/
	
	WDT->WDT_MR = WDT_MR_WDDIS;
   8036e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80372:	4b16      	ldr	r3, [pc, #88]	; (803cc <main+0x70>)
   80374:	605a      	str	r2, [r3, #4]
	CanMsg msg;
	CanMsg msg1={0x000,0x02,{0xBB, 0xFF}};
   80376:	2100      	movs	r1, #0
   80378:	9101      	str	r1, [sp, #4]
   8037a:	9102      	str	r1, [sp, #8]
   8037c:	9103      	str	r1, [sp, #12]
   8037e:	2302      	movs	r3, #2
   80380:	f88d 3005 	strb.w	r3, [sp, #5]
   80384:	22bb      	movs	r2, #187	; 0xbb
   80386:	f88d 2008 	strb.w	r2, [sp, #8]
   8038a:	22ff      	movs	r2, #255	; 0xff
   8038c:	f88d 2009 	strb.w	r2, [sp, #9]
	float T_Q = 0.0000005;
	long F_OSC = 84 * 1000000;
	int BRP = (T_Q * F_OSC / 2) - 1;
	
	// Configure CAN initialization structure
	CanInit canSettings={.brp=41, .phase1 = 6, .phase2 = 5, .propag= 0, .smp= 0, .sjw=2};
   80390:	4608      	mov	r0, r1
   80392:	2205      	movs	r2, #5
   80394:	f362 0003 	bfi	r0, r2, #0, #4
   80398:	f361 1007 	bfi	r0, r1, #4, #4
   8039c:	2206      	movs	r2, #6
   8039e:	f362 200b 	bfi	r0, r2, #8, #4
   803a2:	f363 300f 	bfi	r0, r3, #12, #4
   803a6:	2329      	movs	r3, #41	; 0x29
   803a8:	f363 4017 	bfi	r0, r3, #16, #8
	canSettings.sjw = 2;
	canSettings.brp = BRP;    // Set BRP as calculated earlier
	canSettings.smp = 0;      // Use sample mode
	*/
	// Initialize CAN with receive interrupts enabled
	can_init(canSettings, 0); // Disable receive interrupts
   803ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   803b0:	4b07      	ldr	r3, [pc, #28]	; (803d0 <main+0x74>)
   803b2:	4798      	blx	r3

    while (1) 
    {	
		can_tx(msg1);
   803b4:	ab04      	add	r3, sp, #16
   803b6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
   803ba:	4b06      	ldr	r3, [pc, #24]	; (803d4 <main+0x78>)
   803bc:	4798      	blx	r3
   803be:	e7f9      	b.n	803b4 <main+0x58>
   803c0:	000802b9 	.word	0x000802b9
   803c4:	0501bd00 	.word	0x0501bd00
   803c8:	00080485 	.word	0x00080485
   803cc:	400e1a50 	.word	0x400e1a50
   803d0:	00080161 	.word	0x00080161
   803d4:	000801fd 	.word	0x000801fd

000803d8 <time_init>:
static uint64_t now = 0;
    
__attribute__((constructor)) void time_init(void){
    // Clock calibration is set to '(num cycles for 1ms) / 8'
    // (SysTick is by default set to use 8x clock divisor)
    calib = SysTick->CALIB * 8;
   803d8:	4a09      	ldr	r2, [pc, #36]	; (80400 <time_init+0x28>)
   803da:	68d3      	ldr	r3, [r2, #12]
   803dc:	00db      	lsls	r3, r3, #3
   803de:	2100      	movs	r1, #0
   803e0:	4808      	ldr	r0, [pc, #32]	; (80404 <time_init+0x2c>)
   803e2:	6003      	str	r3, [r0, #0]
   803e4:	6041      	str	r1, [r0, #4]
    // Set reload at calib-1 ticks 
	SysTick->LOAD = (calib & SysTick_LOAD_RELOAD_Msk)-1;
   803e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   803ea:	3b01      	subs	r3, #1
   803ec:	6053      	str	r3, [r2, #4]
    // Reset counter
	SysTick->VAL = 0; 
   803ee:	6091      	str	r1, [r2, #8]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   803f0:	2120      	movs	r1, #32
   803f2:	4b05      	ldr	r3, [pc, #20]	; (80408 <time_init+0x30>)
   803f4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
    // Set interrupt priority
	NVIC_SetPriority(SysTick_IRQn, 2);
	SysTick->CTRL = 
   803f8:	2307      	movs	r3, #7
   803fa:	6013      	str	r3, [r2, #0]
   803fc:	4770      	bx	lr
   803fe:	bf00      	nop
   80400:	e000e010 	.word	0xe000e010
   80404:	20000cb8 	.word	0x20000cb8
   80408:	e000ed00 	.word	0xe000ed00

0008040c <SysTick_Handler>:
	    ((1 << SysTick_CTRL_TICKINT_Pos)   & SysTick_CTRL_TICKINT_Msk)      |   // Enable interrupt
	    ((1 << SysTick_CTRL_ENABLE_Pos)    & SysTick_CTRL_ENABLE_Msk);	        // Enable SysTick
}    


void SysTick_Handler(void){
   8040c:	b430      	push	{r4, r5}
    now += calib;
   8040e:	4906      	ldr	r1, [pc, #24]	; (80428 <SysTick_Handler+0x1c>)
   80410:	e9d1 2300 	ldrd	r2, r3, [r1]
   80414:	4805      	ldr	r0, [pc, #20]	; (8042c <SysTick_Handler+0x20>)
   80416:	e9d0 4500 	ldrd	r4, r5, [r0]
   8041a:	1912      	adds	r2, r2, r4
   8041c:	416b      	adcs	r3, r5
   8041e:	e9c1 2300 	strd	r2, r3, [r1]
}
   80422:	bc30      	pop	{r4, r5}
   80424:	4770      	bx	lr
   80426:	bf00      	nop
   80428:	20000868 	.word	0x20000868
   8042c:	20000cb8 	.word	0x20000cb8

00080430 <push>:
};
RingBuf ringBuf = {0};


int push(RingBuf* rb, uint8_t val){
    if(rb->length >= (sizeof(rb->buffer)/sizeof(rb->buffer[0]))){
   80430:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   80434:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   80438:	d20c      	bcs.n	80454 <push+0x24>
        return 0;
    }
    rb->buffer[rb->insertIdx] = val;
   8043a:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
   8043e:	54c1      	strb	r1, [r0, r3]
    rb->insertIdx = (rb->insertIdx + 1) % (sizeof(rb->buffer)/sizeof(rb->buffer[0]));
   80440:	3301      	adds	r3, #1
   80442:	f3c3 0309 	ubfx	r3, r3, #0, #10
   80446:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
    rb->length++;
   8044a:	3201      	adds	r2, #1
   8044c:	f8c0 240c 	str.w	r2, [r0, #1036]	; 0x40c
    return 1;
   80450:	2001      	movs	r0, #1
   80452:	4770      	bx	lr
        return 0;
   80454:	2000      	movs	r0, #0
}
   80456:	4770      	bx	lr

00080458 <pop>:

int pop(RingBuf* rb, uint8_t* val){    
   80458:	4603      	mov	r3, r0
    if(!rb->length){
   8045a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   8045e:	b180      	cbz	r0, 80482 <pop+0x2a>
        return 0;
    }
    *val = rb->buffer[rb->removeIdx];
   80460:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   80464:	5c9a      	ldrb	r2, [r3, r2]
   80466:	700a      	strb	r2, [r1, #0]
    rb->removeIdx = (rb->removeIdx + 1) % (sizeof(rb->buffer)/sizeof(rb->buffer[0]));
   80468:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   8046c:	3201      	adds	r2, #1
   8046e:	f3c2 0209 	ubfx	r2, r2, #0, #10
   80472:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    rb->length--;
   80476:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
   8047a:	3a01      	subs	r2, #1
   8047c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    return 1;
   80480:	2001      	movs	r0, #1
}
   80482:	4770      	bx	lr

00080484 <uart_init>:

void uart_init(uint32_t cpufreq, int32_t baudrate){
    PMC->PMC_PCER0 |= (1 << ID_UART);
   80484:	4a10      	ldr	r2, [pc, #64]	; (804c8 <uart_init+0x44>)
   80486:	6913      	ldr	r3, [r2, #16]
   80488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8048c:	6113      	str	r3, [r2, #16]
    
    // Set UART pins (A8, A9) to use alternate function (this disables regular IO)
    PIOA->PIO_PDR   |=   PIO_PA8 | PIO_PA9;
   8048e:	4b0f      	ldr	r3, [pc, #60]	; (804cc <uart_init+0x48>)
   80490:	685a      	ldr	r2, [r3, #4]
   80492:	f442 7240 	orr.w	r2, r2, #768	; 0x300
   80496:	605a      	str	r2, [r3, #4]
    // Set alternate function A (see tables 9-2, 34-2)
    PIOA->PIO_ABSR  &= ~(PIO_PA8 | PIO_PA9);
   80498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8049a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   8049e:	671a      	str	r2, [r3, #112]	; 0x70
    
    // Configure UART settings
    UART->UART_CR   |= UART_CR_TXEN | UART_CR_RXEN;
   804a0:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
   804a4:	681a      	ldr	r2, [r3, #0]
   804a6:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   804aa:	601a      	str	r2, [r3, #0]
    UART->UART_MR   |= UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;
   804ac:	685a      	ldr	r2, [r3, #4]
   804ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   804b2:	605a      	str	r2, [r3, #4]
    UART->UART_BRGR = (cpufreq / (16 * baudrate));
   804b4:	0109      	lsls	r1, r1, #4
   804b6:	fbb0 f1f1 	udiv	r1, r0, r1
   804ba:	6219      	str	r1, [r3, #32]
    
    
    // Configure interrupts on receive ready and errors
    UART->UART_IDR = 0xFFFFFFFF;
   804bc:	f04f 32ff 	mov.w	r2, #4294967295
   804c0:	60da      	str	r2, [r3, #12]
    UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   804c2:	22e1      	movs	r2, #225	; 0xe1
   804c4:	609a      	str	r2, [r3, #8]
   804c6:	4770      	bx	lr
   804c8:	400e0600 	.word	0x400e0600
   804cc:	400e0e00 	.word	0x400e0e00

000804d0 <uart_tx>:
   // NVIC_EnableIRQ((IRQn_Type) ID_UART);
    
}    

void uart_tx(uint8_t val){
	UART->UART_THR = val;
   804d0:	4b03      	ldr	r3, [pc, #12]	; (804e0 <uart_tx+0x10>)
   804d2:	61d8      	str	r0, [r3, #28]
    while(!(UART->UART_SR & UART_SR_TXEMPTY)){}
   804d4:	4b02      	ldr	r3, [pc, #8]	; (804e0 <uart_tx+0x10>)
   804d6:	695b      	ldr	r3, [r3, #20]
   804d8:	f413 7f00 	tst.w	r3, #512	; 0x200
   804dc:	d0fa      	beq.n	804d4 <uart_tx+0x4>
}
   804de:	4770      	bx	lr
   804e0:	400e0800 	.word	0x400e0800

000804e4 <uart_rx>:


uint8_t uart_rx(uint8_t* val){
   804e4:	b508      	push	{r3, lr}
    return pop(&ringBuf, val);
   804e6:	4601      	mov	r1, r0
   804e8:	4802      	ldr	r0, [pc, #8]	; (804f4 <uart_rx+0x10>)
   804ea:	4b03      	ldr	r3, [pc, #12]	; (804f8 <uart_rx+0x14>)
   804ec:	4798      	blx	r3
}    
   804ee:	b2c0      	uxtb	r0, r0
   804f0:	bd08      	pop	{r3, pc}
   804f2:	bf00      	nop
   804f4:	20000870 	.word	0x20000870
   804f8:	00080459 	.word	0x00080459

000804fc <UART_Handler>:
    }    
    return r;
}


void UART_Handler(){
   804fc:	b508      	push	{r3, lr}
    
    uint32_t status = UART->UART_SR;
   804fe:	4b0c      	ldr	r3, [pc, #48]	; (80530 <UART_Handler+0x34>)
   80500:	695b      	ldr	r3, [r3, #20]
    
    // Errors: Reset UART
    if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE)){
   80502:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80506:	d003      	beq.n	80510 <UART_Handler+0x14>
        UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80508:	f44f 71a8 	mov.w	r1, #336	; 0x150
   8050c:	4a08      	ldr	r2, [pc, #32]	; (80530 <UART_Handler+0x34>)
   8050e:	6011      	str	r1, [r2, #0]
    }
    
    // Receive ready: push to ring buffer
    if(status & UART_SR_RXRDY){
   80510:	f013 0f01 	tst.w	r3, #1
   80514:	d100      	bne.n	80518 <UART_Handler+0x1c>
   80516:	bd08      	pop	{r3, pc}
        if(!push(&ringBuf, UART->UART_RHR & 0xff)){
   80518:	4b05      	ldr	r3, [pc, #20]	; (80530 <UART_Handler+0x34>)
   8051a:	6999      	ldr	r1, [r3, #24]
   8051c:	b2c9      	uxtb	r1, r1
   8051e:	4805      	ldr	r0, [pc, #20]	; (80534 <UART_Handler+0x38>)
   80520:	4b05      	ldr	r3, [pc, #20]	; (80538 <UART_Handler+0x3c>)
   80522:	4798      	blx	r3
   80524:	2800      	cmp	r0, #0
   80526:	d1f6      	bne.n	80516 <UART_Handler+0x1a>
            printf("UART receive buffer full\n");
   80528:	4804      	ldr	r0, [pc, #16]	; (8053c <UART_Handler+0x40>)
   8052a:	4b05      	ldr	r3, [pc, #20]	; (80540 <UART_Handler+0x44>)
   8052c:	4798      	blx	r3
        }
    }
    
} 
   8052e:	e7f2      	b.n	80516 <UART_Handler+0x1a>
   80530:	400e0800 	.word	0x400e0800
   80534:	20000870 	.word	0x20000870
   80538:	00080431 	.word	0x00080431
   8053c:	0008202c 	.word	0x0008202c
   80540:	00080765 	.word	0x00080765

00080544 <_sbrk>:
// See https://interrupt.memfault.com/blog/boostrapping-libc-with-newlib

extern int _end;
#include <sys/stat.h>

void *_sbrk(int incr){
   80544:	4603      	mov	r3, r0
    static unsigned char *heap = NULL;
    unsigned char *prev_heap;

    if(heap == NULL){
   80546:	4a08      	ldr	r2, [pc, #32]	; (80568 <_sbrk+0x24>)
   80548:	f8d2 2410 	ldr.w	r2, [r2, #1040]	; 0x410
   8054c:	b132      	cbz	r2, 8055c <_sbrk+0x18>
        heap = (unsigned char*)&_end;
    }
    prev_heap = heap;
   8054e:	4a06      	ldr	r2, [pc, #24]	; (80568 <_sbrk+0x24>)
   80550:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410

    heap += incr;
   80554:	4403      	add	r3, r0
   80556:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410

    return prev_heap;
}
   8055a:	4770      	bx	lr
        heap = (unsigned char*)&_end;
   8055c:	4903      	ldr	r1, [pc, #12]	; (8056c <_sbrk+0x28>)
   8055e:	4a02      	ldr	r2, [pc, #8]	; (80568 <_sbrk+0x24>)
   80560:	f8c2 1410 	str.w	r1, [r2, #1040]	; 0x410
   80564:	e7f3      	b.n	8054e <_sbrk+0xa>
   80566:	bf00      	nop
   80568:	20000870 	.word	0x20000870
   8056c:	200012e8 	.word	0x200012e8

00080570 <_close>:

int _close(int file){
    return -1;
}
   80570:	f04f 30ff 	mov.w	r0, #4294967295
   80574:	4770      	bx	lr

00080576 <_fstat>:

int _fstat(int file, struct stat* st){
    st->st_mode = S_IFCHR;
   80576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8057a:	604b      	str	r3, [r1, #4]
    return 0;
}
   8057c:	2000      	movs	r0, #0
   8057e:	4770      	bx	lr

00080580 <_isatty>:

int _isatty(int file){
    return 1;
}
   80580:	2001      	movs	r0, #1
   80582:	4770      	bx	lr

00080584 <_lseek>:

int _lseek(int file, int ptr, int dir){
    return 0;
}
   80584:	2000      	movs	r0, #0
   80586:	4770      	bx	lr

00080588 <_write>:

int _getpid(void){
    return -1;
}

int _write(int file, char* ptr, int len){
   80588:	b570      	push	{r4, r5, r6, lr}
    if(file > 1){
   8058a:	2801      	cmp	r0, #1
   8058c:	dc0b      	bgt.n	805a6 <_write+0x1e>
   8058e:	460e      	mov	r6, r1
   80590:	4615      	mov	r5, r2
   80592:	2400      	movs	r4, #0
   80594:	e003      	b.n	8059e <_write+0x16>
        return -1;    
    }

    for(int idx = 0; idx < len; idx++){
        uart_tx((uint8_t)ptr[idx]);
   80596:	5d30      	ldrb	r0, [r6, r4]
   80598:	4b04      	ldr	r3, [pc, #16]	; (805ac <_write+0x24>)
   8059a:	4798      	blx	r3
    for(int idx = 0; idx < len; idx++){
   8059c:	3401      	adds	r4, #1
   8059e:	42ac      	cmp	r4, r5
   805a0:	dbf9      	blt.n	80596 <_write+0xe>
    }
    return len;
}
   805a2:	4628      	mov	r0, r5
   805a4:	bd70      	pop	{r4, r5, r6, pc}
        return -1;    
   805a6:	f04f 35ff 	mov.w	r5, #4294967295
   805aa:	e7fa      	b.n	805a2 <_write+0x1a>
   805ac:	000804d1 	.word	0x000804d1

000805b0 <_read>:

int _read(int file, char* ptr, int len){
   805b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(file > 1){
   805b2:	2801      	cmp	r0, #1
   805b4:	dc0c      	bgt.n	805d0 <_read+0x20>
   805b6:	4616      	mov	r6, r2
   805b8:	460f      	mov	r7, r1
   805ba:	2400      	movs	r4, #0
   805bc:	4625      	mov	r5, r4
        return -1;
    }
    
    int nread = 0;
    for(int idx = 0; idx < len; idx++){
   805be:	42b4      	cmp	r4, r6
   805c0:	da08      	bge.n	805d4 <_read+0x24>
        int b = uart_rx((uint8_t*)&ptr[idx]);
   805c2:	1938      	adds	r0, r7, r4
   805c4:	4b04      	ldr	r3, [pc, #16]	; (805d8 <_read+0x28>)
   805c6:	4798      	blx	r3
        nread += b;     
   805c8:	4405      	add	r5, r0
        if(!b){
   805ca:	b118      	cbz	r0, 805d4 <_read+0x24>
    for(int idx = 0; idx < len; idx++){
   805cc:	3401      	adds	r4, #1
   805ce:	e7f6      	b.n	805be <_read+0xe>
        return -1;
   805d0:	f04f 35ff 	mov.w	r5, #4294967295
            return nread;
        }        
    }
    return nread;
}
   805d4:	4628      	mov	r0, r5
   805d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   805d8:	000804e5 	.word	0x000804e5

000805dc <__libc_init_array>:
   805dc:	b570      	push	{r4, r5, r6, lr}
   805de:	4e0f      	ldr	r6, [pc, #60]	; (8061c <__libc_init_array+0x40>)
   805e0:	4d0f      	ldr	r5, [pc, #60]	; (80620 <__libc_init_array+0x44>)
   805e2:	1b76      	subs	r6, r6, r5
   805e4:	10b6      	asrs	r6, r6, #2
   805e6:	bf18      	it	ne
   805e8:	2400      	movne	r4, #0
   805ea:	d005      	beq.n	805f8 <__libc_init_array+0x1c>
   805ec:	3401      	adds	r4, #1
   805ee:	f855 3b04 	ldr.w	r3, [r5], #4
   805f2:	4798      	blx	r3
   805f4:	42a6      	cmp	r6, r4
   805f6:	d1f9      	bne.n	805ec <__libc_init_array+0x10>
   805f8:	4e0a      	ldr	r6, [pc, #40]	; (80624 <__libc_init_array+0x48>)
   805fa:	4d0b      	ldr	r5, [pc, #44]	; (80628 <__libc_init_array+0x4c>)
   805fc:	f001 fd28 	bl	82050 <_init>
   80600:	1b76      	subs	r6, r6, r5
   80602:	10b6      	asrs	r6, r6, #2
   80604:	bf18      	it	ne
   80606:	2400      	movne	r4, #0
   80608:	d006      	beq.n	80618 <__libc_init_array+0x3c>
   8060a:	3401      	adds	r4, #1
   8060c:	f855 3b04 	ldr.w	r3, [r5], #4
   80610:	4798      	blx	r3
   80612:	42a6      	cmp	r6, r4
   80614:	d1f9      	bne.n	8060a <__libc_init_array+0x2e>
   80616:	bd70      	pop	{r4, r5, r6, pc}
   80618:	bd70      	pop	{r4, r5, r6, pc}
   8061a:	bf00      	nop
   8061c:	0008205c 	.word	0x0008205c
   80620:	0008205c 	.word	0x0008205c
   80624:	00082068 	.word	0x00082068
   80628:	0008205c 	.word	0x0008205c

0008062c <memset>:
   8062c:	b470      	push	{r4, r5, r6}
   8062e:	0786      	lsls	r6, r0, #30
   80630:	d046      	beq.n	806c0 <memset+0x94>
   80632:	1e54      	subs	r4, r2, #1
   80634:	2a00      	cmp	r2, #0
   80636:	d041      	beq.n	806bc <memset+0x90>
   80638:	b2ca      	uxtb	r2, r1
   8063a:	4603      	mov	r3, r0
   8063c:	e002      	b.n	80644 <memset+0x18>
   8063e:	f114 34ff 	adds.w	r4, r4, #4294967295
   80642:	d33b      	bcc.n	806bc <memset+0x90>
   80644:	f803 2b01 	strb.w	r2, [r3], #1
   80648:	079d      	lsls	r5, r3, #30
   8064a:	d1f8      	bne.n	8063e <memset+0x12>
   8064c:	2c03      	cmp	r4, #3
   8064e:	d92e      	bls.n	806ae <memset+0x82>
   80650:	b2cd      	uxtb	r5, r1
   80652:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80656:	2c0f      	cmp	r4, #15
   80658:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8065c:	d919      	bls.n	80692 <memset+0x66>
   8065e:	4626      	mov	r6, r4
   80660:	f103 0210 	add.w	r2, r3, #16
   80664:	3e10      	subs	r6, #16
   80666:	2e0f      	cmp	r6, #15
   80668:	f842 5c10 	str.w	r5, [r2, #-16]
   8066c:	f842 5c0c 	str.w	r5, [r2, #-12]
   80670:	f842 5c08 	str.w	r5, [r2, #-8]
   80674:	f842 5c04 	str.w	r5, [r2, #-4]
   80678:	f102 0210 	add.w	r2, r2, #16
   8067c:	d8f2      	bhi.n	80664 <memset+0x38>
   8067e:	f1a4 0210 	sub.w	r2, r4, #16
   80682:	f022 020f 	bic.w	r2, r2, #15
   80686:	f004 040f 	and.w	r4, r4, #15
   8068a:	3210      	adds	r2, #16
   8068c:	2c03      	cmp	r4, #3
   8068e:	4413      	add	r3, r2
   80690:	d90d      	bls.n	806ae <memset+0x82>
   80692:	461e      	mov	r6, r3
   80694:	4622      	mov	r2, r4
   80696:	3a04      	subs	r2, #4
   80698:	2a03      	cmp	r2, #3
   8069a:	f846 5b04 	str.w	r5, [r6], #4
   8069e:	d8fa      	bhi.n	80696 <memset+0x6a>
   806a0:	1f22      	subs	r2, r4, #4
   806a2:	f022 0203 	bic.w	r2, r2, #3
   806a6:	3204      	adds	r2, #4
   806a8:	4413      	add	r3, r2
   806aa:	f004 0403 	and.w	r4, r4, #3
   806ae:	b12c      	cbz	r4, 806bc <memset+0x90>
   806b0:	b2c9      	uxtb	r1, r1
   806b2:	441c      	add	r4, r3
   806b4:	f803 1b01 	strb.w	r1, [r3], #1
   806b8:	429c      	cmp	r4, r3
   806ba:	d1fb      	bne.n	806b4 <memset+0x88>
   806bc:	bc70      	pop	{r4, r5, r6}
   806be:	4770      	bx	lr
   806c0:	4614      	mov	r4, r2
   806c2:	4603      	mov	r3, r0
   806c4:	e7c2      	b.n	8064c <memset+0x20>
   806c6:	bf00      	nop

000806c8 <_puts_r>:
   806c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   806ca:	4605      	mov	r5, r0
   806cc:	b089      	sub	sp, #36	; 0x24
   806ce:	4608      	mov	r0, r1
   806d0:	460c      	mov	r4, r1
   806d2:	2701      	movs	r7, #1
   806d4:	f000 f84e 	bl	80774 <strlen>
   806d8:	2602      	movs	r6, #2
   806da:	19c3      	adds	r3, r0, r7
   806dc:	4920      	ldr	r1, [pc, #128]	; (80760 <_puts_r+0x98>)
   806de:	9303      	str	r3, [sp, #12]
   806e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   806e2:	aa04      	add	r2, sp, #16
   806e4:	9404      	str	r4, [sp, #16]
   806e6:	9005      	str	r0, [sp, #20]
   806e8:	68ac      	ldr	r4, [r5, #8]
   806ea:	9707      	str	r7, [sp, #28]
   806ec:	9602      	str	r6, [sp, #8]
   806ee:	9106      	str	r1, [sp, #24]
   806f0:	9201      	str	r2, [sp, #4]
   806f2:	b353      	cbz	r3, 8074a <_puts_r+0x82>
   806f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   806f6:	f013 0f01 	tst.w	r3, #1
   806fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   806fe:	b29a      	uxth	r2, r3
   80700:	d101      	bne.n	80706 <_puts_r+0x3e>
   80702:	0590      	lsls	r0, r2, #22
   80704:	d525      	bpl.n	80752 <_puts_r+0x8a>
   80706:	0491      	lsls	r1, r2, #18
   80708:	d406      	bmi.n	80718 <_puts_r+0x50>
   8070a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8070c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   80710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   80714:	81a3      	strh	r3, [r4, #12]
   80716:	6662      	str	r2, [r4, #100]	; 0x64
   80718:	4628      	mov	r0, r5
   8071a:	aa01      	add	r2, sp, #4
   8071c:	4621      	mov	r1, r4
   8071e:	f000 fb4b 	bl	80db8 <__sfvwrite_r>
   80722:	6e63      	ldr	r3, [r4, #100]	; 0x64
   80724:	2800      	cmp	r0, #0
   80726:	bf0c      	ite	eq
   80728:	250a      	moveq	r5, #10
   8072a:	f04f 35ff 	movne.w	r5, #4294967295
   8072e:	07da      	lsls	r2, r3, #31
   80730:	d402      	bmi.n	80738 <_puts_r+0x70>
   80732:	89a3      	ldrh	r3, [r4, #12]
   80734:	059b      	lsls	r3, r3, #22
   80736:	d502      	bpl.n	8073e <_puts_r+0x76>
   80738:	4628      	mov	r0, r5
   8073a:	b009      	add	sp, #36	; 0x24
   8073c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8073e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80740:	f000 fce2 	bl	81108 <__retarget_lock_release_recursive>
   80744:	4628      	mov	r0, r5
   80746:	b009      	add	sp, #36	; 0x24
   80748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8074a:	4628      	mov	r0, r5
   8074c:	f000 f9a8 	bl	80aa0 <__sinit>
   80750:	e7d0      	b.n	806f4 <_puts_r+0x2c>
   80752:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80754:	f000 fcd6 	bl	81104 <__retarget_lock_acquire_recursive>
   80758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8075c:	b29a      	uxth	r2, r3
   8075e:	e7d2      	b.n	80706 <_puts_r+0x3e>
   80760:	0008204c 	.word	0x0008204c

00080764 <puts>:
   80764:	4b02      	ldr	r3, [pc, #8]	; (80770 <puts+0xc>)
   80766:	4601      	mov	r1, r0
   80768:	6818      	ldr	r0, [r3, #0]
   8076a:	f7ff bfad 	b.w	806c8 <_puts_r>
   8076e:	bf00      	nop
   80770:	20000004 	.word	0x20000004

00080774 <strlen>:
   80774:	f020 0103 	bic.w	r1, r0, #3
   80778:	f010 0003 	ands.w	r0, r0, #3
   8077c:	f1c0 0000 	rsb	r0, r0, #0
   80780:	f851 3b04 	ldr.w	r3, [r1], #4
   80784:	f100 0c04 	add.w	ip, r0, #4
   80788:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8078c:	f06f 0200 	mvn.w	r2, #0
   80790:	bf1c      	itt	ne
   80792:	fa22 f20c 	lsrne.w	r2, r2, ip
   80796:	4313      	orrne	r3, r2
   80798:	f04f 0c01 	mov.w	ip, #1
   8079c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   807a0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   807a4:	eba3 020c 	sub.w	r2, r3, ip
   807a8:	ea22 0203 	bic.w	r2, r2, r3
   807ac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   807b0:	bf04      	itt	eq
   807b2:	f851 3b04 	ldreq.w	r3, [r1], #4
   807b6:	3004      	addeq	r0, #4
   807b8:	d0f4      	beq.n	807a4 <strlen+0x30>
   807ba:	f1c2 0100 	rsb	r1, r2, #0
   807be:	ea02 0201 	and.w	r2, r2, r1
   807c2:	fab2 f282 	clz	r2, r2
   807c6:	f1c2 021f 	rsb	r2, r2, #31
   807ca:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   807ce:	4770      	bx	lr

000807d0 <__swsetup_r>:
   807d0:	b538      	push	{r3, r4, r5, lr}
   807d2:	4b30      	ldr	r3, [pc, #192]	; (80894 <__swsetup_r+0xc4>)
   807d4:	4605      	mov	r5, r0
   807d6:	6818      	ldr	r0, [r3, #0]
   807d8:	460c      	mov	r4, r1
   807da:	b110      	cbz	r0, 807e2 <__swsetup_r+0x12>
   807dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   807de:	2b00      	cmp	r3, #0
   807e0:	d038      	beq.n	80854 <__swsetup_r+0x84>
   807e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   807e6:	b293      	uxth	r3, r2
   807e8:	0718      	lsls	r0, r3, #28
   807ea:	d50c      	bpl.n	80806 <__swsetup_r+0x36>
   807ec:	6920      	ldr	r0, [r4, #16]
   807ee:	b1a8      	cbz	r0, 8081c <__swsetup_r+0x4c>
   807f0:	f013 0201 	ands.w	r2, r3, #1
   807f4:	d01e      	beq.n	80834 <__swsetup_r+0x64>
   807f6:	2200      	movs	r2, #0
   807f8:	6963      	ldr	r3, [r4, #20]
   807fa:	60a2      	str	r2, [r4, #8]
   807fc:	425b      	negs	r3, r3
   807fe:	61a3      	str	r3, [r4, #24]
   80800:	b1f0      	cbz	r0, 80840 <__swsetup_r+0x70>
   80802:	2000      	movs	r0, #0
   80804:	bd38      	pop	{r3, r4, r5, pc}
   80806:	06d9      	lsls	r1, r3, #27
   80808:	d53b      	bpl.n	80882 <__swsetup_r+0xb2>
   8080a:	0758      	lsls	r0, r3, #29
   8080c:	d425      	bmi.n	8085a <__swsetup_r+0x8a>
   8080e:	6920      	ldr	r0, [r4, #16]
   80810:	f042 0308 	orr.w	r3, r2, #8
   80814:	81a3      	strh	r3, [r4, #12]
   80816:	b29b      	uxth	r3, r3
   80818:	2800      	cmp	r0, #0
   8081a:	d1e9      	bne.n	807f0 <__swsetup_r+0x20>
   8081c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   80820:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   80824:	d0e4      	beq.n	807f0 <__swsetup_r+0x20>
   80826:	4628      	mov	r0, r5
   80828:	4621      	mov	r1, r4
   8082a:	f000 fc9d 	bl	81168 <__smakebuf_r>
   8082e:	89a3      	ldrh	r3, [r4, #12]
   80830:	6920      	ldr	r0, [r4, #16]
   80832:	e7dd      	b.n	807f0 <__swsetup_r+0x20>
   80834:	0799      	lsls	r1, r3, #30
   80836:	bf58      	it	pl
   80838:	6962      	ldrpl	r2, [r4, #20]
   8083a:	60a2      	str	r2, [r4, #8]
   8083c:	2800      	cmp	r0, #0
   8083e:	d1e0      	bne.n	80802 <__swsetup_r+0x32>
   80840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80844:	061a      	lsls	r2, r3, #24
   80846:	d5dd      	bpl.n	80804 <__swsetup_r+0x34>
   80848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8084c:	81a3      	strh	r3, [r4, #12]
   8084e:	f04f 30ff 	mov.w	r0, #4294967295
   80852:	bd38      	pop	{r3, r4, r5, pc}
   80854:	f000 f924 	bl	80aa0 <__sinit>
   80858:	e7c3      	b.n	807e2 <__swsetup_r+0x12>
   8085a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8085c:	b151      	cbz	r1, 80874 <__swsetup_r+0xa4>
   8085e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80862:	4299      	cmp	r1, r3
   80864:	d004      	beq.n	80870 <__swsetup_r+0xa0>
   80866:	4628      	mov	r0, r5
   80868:	f000 f9c0 	bl	80bec <_free_r>
   8086c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80870:	2300      	movs	r3, #0
   80872:	6323      	str	r3, [r4, #48]	; 0x30
   80874:	2300      	movs	r3, #0
   80876:	6920      	ldr	r0, [r4, #16]
   80878:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8087c:	e884 0009 	stmia.w	r4, {r0, r3}
   80880:	e7c6      	b.n	80810 <__swsetup_r+0x40>
   80882:	2309      	movs	r3, #9
   80884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80888:	602b      	str	r3, [r5, #0]
   8088a:	f04f 30ff 	mov.w	r0, #4294967295
   8088e:	81a2      	strh	r2, [r4, #12]
   80890:	bd38      	pop	{r3, r4, r5, pc}
   80892:	bf00      	nop
   80894:	20000004 	.word	0x20000004

00080898 <register_fini>:
   80898:	4b02      	ldr	r3, [pc, #8]	; (808a4 <register_fini+0xc>)
   8089a:	b113      	cbz	r3, 808a2 <register_fini+0xa>
   8089c:	4802      	ldr	r0, [pc, #8]	; (808a8 <register_fini+0x10>)
   8089e:	f000 b805 	b.w	808ac <atexit>
   808a2:	4770      	bx	lr
   808a4:	00000000 	.word	0x00000000
   808a8:	00080b19 	.word	0x00080b19

000808ac <atexit>:
   808ac:	2300      	movs	r3, #0
   808ae:	4601      	mov	r1, r0
   808b0:	461a      	mov	r2, r3
   808b2:	4618      	mov	r0, r3
   808b4:	f001 ba92 	b.w	81ddc <__register_exitproc>

000808b8 <__sflush_r>:
   808b8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   808bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   808c0:	b29a      	uxth	r2, r3
   808c2:	460d      	mov	r5, r1
   808c4:	0711      	lsls	r1, r2, #28
   808c6:	4680      	mov	r8, r0
   808c8:	d43a      	bmi.n	80940 <__sflush_r+0x88>
   808ca:	686a      	ldr	r2, [r5, #4]
   808cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   808d0:	2a00      	cmp	r2, #0
   808d2:	81ab      	strh	r3, [r5, #12]
   808d4:	dd70      	ble.n	809b8 <__sflush_r+0x100>
   808d6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   808d8:	2c00      	cmp	r4, #0
   808da:	d04a      	beq.n	80972 <__sflush_r+0xba>
   808dc:	2200      	movs	r2, #0
   808de:	b29b      	uxth	r3, r3
   808e0:	f8d8 6000 	ldr.w	r6, [r8]
   808e4:	f8c8 2000 	str.w	r2, [r8]
   808e8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   808ec:	d068      	beq.n	809c0 <__sflush_r+0x108>
   808ee:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   808f0:	075f      	lsls	r7, r3, #29
   808f2:	d505      	bpl.n	80900 <__sflush_r+0x48>
   808f4:	6869      	ldr	r1, [r5, #4]
   808f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   808f8:	1a52      	subs	r2, r2, r1
   808fa:	b10b      	cbz	r3, 80900 <__sflush_r+0x48>
   808fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   808fe:	1ad2      	subs	r2, r2, r3
   80900:	2300      	movs	r3, #0
   80902:	69e9      	ldr	r1, [r5, #28]
   80904:	4640      	mov	r0, r8
   80906:	47a0      	blx	r4
   80908:	1c44      	adds	r4, r0, #1
   8090a:	d03d      	beq.n	80988 <__sflush_r+0xd0>
   8090c:	2100      	movs	r1, #0
   8090e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   80912:	692a      	ldr	r2, [r5, #16]
   80914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   80918:	81ab      	strh	r3, [r5, #12]
   8091a:	04db      	lsls	r3, r3, #19
   8091c:	6069      	str	r1, [r5, #4]
   8091e:	602a      	str	r2, [r5, #0]
   80920:	d448      	bmi.n	809b4 <__sflush_r+0xfc>
   80922:	6b29      	ldr	r1, [r5, #48]	; 0x30
   80924:	f8c8 6000 	str.w	r6, [r8]
   80928:	b319      	cbz	r1, 80972 <__sflush_r+0xba>
   8092a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8092e:	4299      	cmp	r1, r3
   80930:	d002      	beq.n	80938 <__sflush_r+0x80>
   80932:	4640      	mov	r0, r8
   80934:	f000 f95a 	bl	80bec <_free_r>
   80938:	2000      	movs	r0, #0
   8093a:	6328      	str	r0, [r5, #48]	; 0x30
   8093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80940:	692e      	ldr	r6, [r5, #16]
   80942:	b1b6      	cbz	r6, 80972 <__sflush_r+0xba>
   80944:	0791      	lsls	r1, r2, #30
   80946:	bf18      	it	ne
   80948:	2300      	movne	r3, #0
   8094a:	682c      	ldr	r4, [r5, #0]
   8094c:	bf08      	it	eq
   8094e:	696b      	ldreq	r3, [r5, #20]
   80950:	602e      	str	r6, [r5, #0]
   80952:	1ba4      	subs	r4, r4, r6
   80954:	60ab      	str	r3, [r5, #8]
   80956:	e00a      	b.n	8096e <__sflush_r+0xb6>
   80958:	4623      	mov	r3, r4
   8095a:	4632      	mov	r2, r6
   8095c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8095e:	69e9      	ldr	r1, [r5, #28]
   80960:	4640      	mov	r0, r8
   80962:	47b8      	blx	r7
   80964:	2800      	cmp	r0, #0
   80966:	eba4 0400 	sub.w	r4, r4, r0
   8096a:	4406      	add	r6, r0
   8096c:	dd04      	ble.n	80978 <__sflush_r+0xc0>
   8096e:	2c00      	cmp	r4, #0
   80970:	dcf2      	bgt.n	80958 <__sflush_r+0xa0>
   80972:	2000      	movs	r0, #0
   80974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80978:	89ab      	ldrh	r3, [r5, #12]
   8097a:	f04f 30ff 	mov.w	r0, #4294967295
   8097e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80982:	81ab      	strh	r3, [r5, #12]
   80984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80988:	f8d8 4000 	ldr.w	r4, [r8]
   8098c:	2c1d      	cmp	r4, #29
   8098e:	d8f3      	bhi.n	80978 <__sflush_r+0xc0>
   80990:	4b16      	ldr	r3, [pc, #88]	; (809ec <__sflush_r+0x134>)
   80992:	40e3      	lsrs	r3, r4
   80994:	43db      	mvns	r3, r3
   80996:	f013 0301 	ands.w	r3, r3, #1
   8099a:	d1ed      	bne.n	80978 <__sflush_r+0xc0>
   8099c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   809a0:	6929      	ldr	r1, [r5, #16]
   809a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   809a6:	81aa      	strh	r2, [r5, #12]
   809a8:	04d2      	lsls	r2, r2, #19
   809aa:	606b      	str	r3, [r5, #4]
   809ac:	6029      	str	r1, [r5, #0]
   809ae:	d5b8      	bpl.n	80922 <__sflush_r+0x6a>
   809b0:	2c00      	cmp	r4, #0
   809b2:	d1b6      	bne.n	80922 <__sflush_r+0x6a>
   809b4:	6528      	str	r0, [r5, #80]	; 0x50
   809b6:	e7b4      	b.n	80922 <__sflush_r+0x6a>
   809b8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   809ba:	2a00      	cmp	r2, #0
   809bc:	dc8b      	bgt.n	808d6 <__sflush_r+0x1e>
   809be:	e7d8      	b.n	80972 <__sflush_r+0xba>
   809c0:	2301      	movs	r3, #1
   809c2:	69e9      	ldr	r1, [r5, #28]
   809c4:	4640      	mov	r0, r8
   809c6:	47a0      	blx	r4
   809c8:	1c43      	adds	r3, r0, #1
   809ca:	4602      	mov	r2, r0
   809cc:	d002      	beq.n	809d4 <__sflush_r+0x11c>
   809ce:	89ab      	ldrh	r3, [r5, #12]
   809d0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   809d2:	e78d      	b.n	808f0 <__sflush_r+0x38>
   809d4:	f8d8 3000 	ldr.w	r3, [r8]
   809d8:	2b00      	cmp	r3, #0
   809da:	d0f8      	beq.n	809ce <__sflush_r+0x116>
   809dc:	2b1d      	cmp	r3, #29
   809de:	d001      	beq.n	809e4 <__sflush_r+0x12c>
   809e0:	2b16      	cmp	r3, #22
   809e2:	d1c9      	bne.n	80978 <__sflush_r+0xc0>
   809e4:	f8c8 6000 	str.w	r6, [r8]
   809e8:	e7c3      	b.n	80972 <__sflush_r+0xba>
   809ea:	bf00      	nop
   809ec:	20400001 	.word	0x20400001

000809f0 <_fflush_r>:
   809f0:	b538      	push	{r3, r4, r5, lr}
   809f2:	460d      	mov	r5, r1
   809f4:	4604      	mov	r4, r0
   809f6:	b108      	cbz	r0, 809fc <_fflush_r+0xc>
   809f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   809fa:	b1bb      	cbz	r3, 80a2c <_fflush_r+0x3c>
   809fc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   80a00:	b188      	cbz	r0, 80a26 <_fflush_r+0x36>
   80a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   80a04:	07db      	lsls	r3, r3, #31
   80a06:	d401      	bmi.n	80a0c <_fflush_r+0x1c>
   80a08:	0581      	lsls	r1, r0, #22
   80a0a:	d517      	bpl.n	80a3c <_fflush_r+0x4c>
   80a0c:	4620      	mov	r0, r4
   80a0e:	4629      	mov	r1, r5
   80a10:	f7ff ff52 	bl	808b8 <__sflush_r>
   80a14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   80a16:	4604      	mov	r4, r0
   80a18:	07da      	lsls	r2, r3, #31
   80a1a:	d402      	bmi.n	80a22 <_fflush_r+0x32>
   80a1c:	89ab      	ldrh	r3, [r5, #12]
   80a1e:	059b      	lsls	r3, r3, #22
   80a20:	d507      	bpl.n	80a32 <_fflush_r+0x42>
   80a22:	4620      	mov	r0, r4
   80a24:	bd38      	pop	{r3, r4, r5, pc}
   80a26:	4604      	mov	r4, r0
   80a28:	4620      	mov	r0, r4
   80a2a:	bd38      	pop	{r3, r4, r5, pc}
   80a2c:	f000 f838 	bl	80aa0 <__sinit>
   80a30:	e7e4      	b.n	809fc <_fflush_r+0xc>
   80a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
   80a34:	f000 fb68 	bl	81108 <__retarget_lock_release_recursive>
   80a38:	4620      	mov	r0, r4
   80a3a:	bd38      	pop	{r3, r4, r5, pc}
   80a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   80a3e:	f000 fb61 	bl	81104 <__retarget_lock_acquire_recursive>
   80a42:	e7e3      	b.n	80a0c <_fflush_r+0x1c>

00080a44 <_cleanup_r>:
   80a44:	4901      	ldr	r1, [pc, #4]	; (80a4c <_cleanup_r+0x8>)
   80a46:	f000 bb31 	b.w	810ac <_fwalk_reent>
   80a4a:	bf00      	nop
   80a4c:	00081ec5 	.word	0x00081ec5

00080a50 <std.isra.0>:
   80a50:	2300      	movs	r3, #0
   80a52:	b510      	push	{r4, lr}
   80a54:	4604      	mov	r4, r0
   80a56:	8181      	strh	r1, [r0, #12]
   80a58:	81c2      	strh	r2, [r0, #14]
   80a5a:	6003      	str	r3, [r0, #0]
   80a5c:	6043      	str	r3, [r0, #4]
   80a5e:	6083      	str	r3, [r0, #8]
   80a60:	6643      	str	r3, [r0, #100]	; 0x64
   80a62:	6103      	str	r3, [r0, #16]
   80a64:	6143      	str	r3, [r0, #20]
   80a66:	6183      	str	r3, [r0, #24]
   80a68:	4619      	mov	r1, r3
   80a6a:	2208      	movs	r2, #8
   80a6c:	305c      	adds	r0, #92	; 0x5c
   80a6e:	f7ff fddd 	bl	8062c <memset>
   80a72:	4807      	ldr	r0, [pc, #28]	; (80a90 <std.isra.0+0x40>)
   80a74:	4907      	ldr	r1, [pc, #28]	; (80a94 <std.isra.0+0x44>)
   80a76:	4a08      	ldr	r2, [pc, #32]	; (80a98 <std.isra.0+0x48>)
   80a78:	4b08      	ldr	r3, [pc, #32]	; (80a9c <std.isra.0+0x4c>)
   80a7a:	6220      	str	r0, [r4, #32]
   80a7c:	61e4      	str	r4, [r4, #28]
   80a7e:	6261      	str	r1, [r4, #36]	; 0x24
   80a80:	62a2      	str	r2, [r4, #40]	; 0x28
   80a82:	62e3      	str	r3, [r4, #44]	; 0x2c
   80a84:	f104 0058 	add.w	r0, r4, #88	; 0x58
   80a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80a8c:	f000 bb36 	b.w	810fc <__retarget_lock_init_recursive>
   80a90:	00081d29 	.word	0x00081d29
   80a94:	00081d4d 	.word	0x00081d4d
   80a98:	00081d89 	.word	0x00081d89
   80a9c:	00081da9 	.word	0x00081da9

00080aa0 <__sinit>:
   80aa0:	b510      	push	{r4, lr}
   80aa2:	4604      	mov	r4, r0
   80aa4:	4814      	ldr	r0, [pc, #80]	; (80af8 <__sinit+0x58>)
   80aa6:	f000 fb2d 	bl	81104 <__retarget_lock_acquire_recursive>
   80aaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80aac:	b9fa      	cbnz	r2, 80aee <__sinit+0x4e>
   80aae:	2003      	movs	r0, #3
   80ab0:	4912      	ldr	r1, [pc, #72]	; (80afc <__sinit+0x5c>)
   80ab2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   80ab6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   80aba:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   80abe:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   80ac2:	63e1      	str	r1, [r4, #60]	; 0x3c
   80ac4:	6860      	ldr	r0, [r4, #4]
   80ac6:	2104      	movs	r1, #4
   80ac8:	f7ff ffc2 	bl	80a50 <std.isra.0>
   80acc:	68a0      	ldr	r0, [r4, #8]
   80ace:	2201      	movs	r2, #1
   80ad0:	2109      	movs	r1, #9
   80ad2:	f7ff ffbd 	bl	80a50 <std.isra.0>
   80ad6:	68e0      	ldr	r0, [r4, #12]
   80ad8:	2202      	movs	r2, #2
   80ada:	2112      	movs	r1, #18
   80adc:	f7ff ffb8 	bl	80a50 <std.isra.0>
   80ae0:	2301      	movs	r3, #1
   80ae2:	4805      	ldr	r0, [pc, #20]	; (80af8 <__sinit+0x58>)
   80ae4:	63a3      	str	r3, [r4, #56]	; 0x38
   80ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80aea:	f000 bb0d 	b.w	81108 <__retarget_lock_release_recursive>
   80aee:	4802      	ldr	r0, [pc, #8]	; (80af8 <__sinit+0x58>)
   80af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80af4:	f000 bb08 	b.w	81108 <__retarget_lock_release_recursive>
   80af8:	20000ccc 	.word	0x20000ccc
   80afc:	00080a45 	.word	0x00080a45

00080b00 <__sfp_lock_acquire>:
   80b00:	4801      	ldr	r0, [pc, #4]	; (80b08 <__sfp_lock_acquire+0x8>)
   80b02:	f000 baff 	b.w	81104 <__retarget_lock_acquire_recursive>
   80b06:	bf00      	nop
   80b08:	20000ce0 	.word	0x20000ce0

00080b0c <__sfp_lock_release>:
   80b0c:	4801      	ldr	r0, [pc, #4]	; (80b14 <__sfp_lock_release+0x8>)
   80b0e:	f000 bafb 	b.w	81108 <__retarget_lock_release_recursive>
   80b12:	bf00      	nop
   80b14:	20000ce0 	.word	0x20000ce0

00080b18 <__libc_fini_array>:
   80b18:	b538      	push	{r3, r4, r5, lr}
   80b1a:	4c0a      	ldr	r4, [pc, #40]	; (80b44 <__libc_fini_array+0x2c>)
   80b1c:	4d0a      	ldr	r5, [pc, #40]	; (80b48 <__libc_fini_array+0x30>)
   80b1e:	1b64      	subs	r4, r4, r5
   80b20:	10a4      	asrs	r4, r4, #2
   80b22:	d00a      	beq.n	80b3a <__libc_fini_array+0x22>
   80b24:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80b28:	3b01      	subs	r3, #1
   80b2a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80b2e:	3c01      	subs	r4, #1
   80b30:	f855 3904 	ldr.w	r3, [r5], #-4
   80b34:	4798      	blx	r3
   80b36:	2c00      	cmp	r4, #0
   80b38:	d1f9      	bne.n	80b2e <__libc_fini_array+0x16>
   80b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80b3e:	f001 ba93 	b.w	82068 <_fini>
   80b42:	bf00      	nop
   80b44:	00082078 	.word	0x00082078
   80b48:	00082074 	.word	0x00082074

00080b4c <_malloc_trim_r>:
   80b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b4e:	460c      	mov	r4, r1
   80b50:	4f23      	ldr	r7, [pc, #140]	; (80be0 <_malloc_trim_r+0x94>)
   80b52:	4606      	mov	r6, r0
   80b54:	f000 ff14 	bl	81980 <__malloc_lock>
   80b58:	68bb      	ldr	r3, [r7, #8]
   80b5a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   80b5e:	685d      	ldr	r5, [r3, #4]
   80b60:	310f      	adds	r1, #15
   80b62:	f025 0503 	bic.w	r5, r5, #3
   80b66:	4429      	add	r1, r5
   80b68:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   80b6c:	f021 010f 	bic.w	r1, r1, #15
   80b70:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   80b74:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   80b78:	db07      	blt.n	80b8a <_malloc_trim_r+0x3e>
   80b7a:	2100      	movs	r1, #0
   80b7c:	4630      	mov	r0, r6
   80b7e:	f001 f8c1 	bl	81d04 <_sbrk_r>
   80b82:	68bb      	ldr	r3, [r7, #8]
   80b84:	442b      	add	r3, r5
   80b86:	4298      	cmp	r0, r3
   80b88:	d004      	beq.n	80b94 <_malloc_trim_r+0x48>
   80b8a:	4630      	mov	r0, r6
   80b8c:	f000 fefe 	bl	8198c <__malloc_unlock>
   80b90:	2000      	movs	r0, #0
   80b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b94:	4261      	negs	r1, r4
   80b96:	4630      	mov	r0, r6
   80b98:	f001 f8b4 	bl	81d04 <_sbrk_r>
   80b9c:	3001      	adds	r0, #1
   80b9e:	d00d      	beq.n	80bbc <_malloc_trim_r+0x70>
   80ba0:	4b10      	ldr	r3, [pc, #64]	; (80be4 <_malloc_trim_r+0x98>)
   80ba2:	68ba      	ldr	r2, [r7, #8]
   80ba4:	6819      	ldr	r1, [r3, #0]
   80ba6:	1b2d      	subs	r5, r5, r4
   80ba8:	f045 0501 	orr.w	r5, r5, #1
   80bac:	4630      	mov	r0, r6
   80bae:	1b09      	subs	r1, r1, r4
   80bb0:	6055      	str	r5, [r2, #4]
   80bb2:	6019      	str	r1, [r3, #0]
   80bb4:	f000 feea 	bl	8198c <__malloc_unlock>
   80bb8:	2001      	movs	r0, #1
   80bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80bbc:	2100      	movs	r1, #0
   80bbe:	4630      	mov	r0, r6
   80bc0:	f001 f8a0 	bl	81d04 <_sbrk_r>
   80bc4:	68ba      	ldr	r2, [r7, #8]
   80bc6:	1a83      	subs	r3, r0, r2
   80bc8:	2b0f      	cmp	r3, #15
   80bca:	ddde      	ble.n	80b8a <_malloc_trim_r+0x3e>
   80bcc:	4c06      	ldr	r4, [pc, #24]	; (80be8 <_malloc_trim_r+0x9c>)
   80bce:	4905      	ldr	r1, [pc, #20]	; (80be4 <_malloc_trim_r+0x98>)
   80bd0:	6824      	ldr	r4, [r4, #0]
   80bd2:	f043 0301 	orr.w	r3, r3, #1
   80bd6:	1b00      	subs	r0, r0, r4
   80bd8:	6053      	str	r3, [r2, #4]
   80bda:	6008      	str	r0, [r1, #0]
   80bdc:	e7d5      	b.n	80b8a <_malloc_trim_r+0x3e>
   80bde:	bf00      	nop
   80be0:	20000434 	.word	0x20000434
   80be4:	20000c84 	.word	0x20000c84
   80be8:	2000083c 	.word	0x2000083c

00080bec <_free_r>:
   80bec:	2900      	cmp	r1, #0
   80bee:	d044      	beq.n	80c7a <_free_r+0x8e>
   80bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80bf4:	460d      	mov	r5, r1
   80bf6:	4680      	mov	r8, r0
   80bf8:	f000 fec2 	bl	81980 <__malloc_lock>
   80bfc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   80c00:	4969      	ldr	r1, [pc, #420]	; (80da8 <_free_r+0x1bc>)
   80c02:	f1a5 0408 	sub.w	r4, r5, #8
   80c06:	f027 0301 	bic.w	r3, r7, #1
   80c0a:	18e2      	adds	r2, r4, r3
   80c0c:	688e      	ldr	r6, [r1, #8]
   80c0e:	6850      	ldr	r0, [r2, #4]
   80c10:	42b2      	cmp	r2, r6
   80c12:	f020 0003 	bic.w	r0, r0, #3
   80c16:	d05e      	beq.n	80cd6 <_free_r+0xea>
   80c18:	07fe      	lsls	r6, r7, #31
   80c1a:	6050      	str	r0, [r2, #4]
   80c1c:	d40b      	bmi.n	80c36 <_free_r+0x4a>
   80c1e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   80c22:	f101 0e08 	add.w	lr, r1, #8
   80c26:	1be4      	subs	r4, r4, r7
   80c28:	68a5      	ldr	r5, [r4, #8]
   80c2a:	443b      	add	r3, r7
   80c2c:	4575      	cmp	r5, lr
   80c2e:	d06d      	beq.n	80d0c <_free_r+0x120>
   80c30:	68e7      	ldr	r7, [r4, #12]
   80c32:	60ef      	str	r7, [r5, #12]
   80c34:	60bd      	str	r5, [r7, #8]
   80c36:	1815      	adds	r5, r2, r0
   80c38:	686d      	ldr	r5, [r5, #4]
   80c3a:	07ed      	lsls	r5, r5, #31
   80c3c:	d53e      	bpl.n	80cbc <_free_r+0xd0>
   80c3e:	f043 0201 	orr.w	r2, r3, #1
   80c42:	6062      	str	r2, [r4, #4]
   80c44:	50e3      	str	r3, [r4, r3]
   80c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80c4a:	d217      	bcs.n	80c7c <_free_r+0x90>
   80c4c:	2201      	movs	r2, #1
   80c4e:	08db      	lsrs	r3, r3, #3
   80c50:	1098      	asrs	r0, r3, #2
   80c52:	684d      	ldr	r5, [r1, #4]
   80c54:	4413      	add	r3, r2
   80c56:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   80c5a:	4082      	lsls	r2, r0
   80c5c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   80c60:	432a      	orrs	r2, r5
   80c62:	3808      	subs	r0, #8
   80c64:	60e0      	str	r0, [r4, #12]
   80c66:	60a7      	str	r7, [r4, #8]
   80c68:	604a      	str	r2, [r1, #4]
   80c6a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   80c6e:	60fc      	str	r4, [r7, #12]
   80c70:	4640      	mov	r0, r8
   80c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80c76:	f000 be89 	b.w	8198c <__malloc_unlock>
   80c7a:	4770      	bx	lr
   80c7c:	0a5a      	lsrs	r2, r3, #9
   80c7e:	2a04      	cmp	r2, #4
   80c80:	d852      	bhi.n	80d28 <_free_r+0x13c>
   80c82:	099a      	lsrs	r2, r3, #6
   80c84:	f102 0739 	add.w	r7, r2, #57	; 0x39
   80c88:	00ff      	lsls	r7, r7, #3
   80c8a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   80c8e:	19c8      	adds	r0, r1, r7
   80c90:	59ca      	ldr	r2, [r1, r7]
   80c92:	3808      	subs	r0, #8
   80c94:	4290      	cmp	r0, r2
   80c96:	d04f      	beq.n	80d38 <_free_r+0x14c>
   80c98:	6851      	ldr	r1, [r2, #4]
   80c9a:	f021 0103 	bic.w	r1, r1, #3
   80c9e:	428b      	cmp	r3, r1
   80ca0:	d232      	bcs.n	80d08 <_free_r+0x11c>
   80ca2:	6892      	ldr	r2, [r2, #8]
   80ca4:	4290      	cmp	r0, r2
   80ca6:	d1f7      	bne.n	80c98 <_free_r+0xac>
   80ca8:	68c3      	ldr	r3, [r0, #12]
   80caa:	60a0      	str	r0, [r4, #8]
   80cac:	60e3      	str	r3, [r4, #12]
   80cae:	609c      	str	r4, [r3, #8]
   80cb0:	60c4      	str	r4, [r0, #12]
   80cb2:	4640      	mov	r0, r8
   80cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80cb8:	f000 be68 	b.w	8198c <__malloc_unlock>
   80cbc:	6895      	ldr	r5, [r2, #8]
   80cbe:	4f3b      	ldr	r7, [pc, #236]	; (80dac <_free_r+0x1c0>)
   80cc0:	4403      	add	r3, r0
   80cc2:	42bd      	cmp	r5, r7
   80cc4:	d040      	beq.n	80d48 <_free_r+0x15c>
   80cc6:	68d0      	ldr	r0, [r2, #12]
   80cc8:	f043 0201 	orr.w	r2, r3, #1
   80ccc:	60e8      	str	r0, [r5, #12]
   80cce:	6085      	str	r5, [r0, #8]
   80cd0:	6062      	str	r2, [r4, #4]
   80cd2:	50e3      	str	r3, [r4, r3]
   80cd4:	e7b7      	b.n	80c46 <_free_r+0x5a>
   80cd6:	07ff      	lsls	r7, r7, #31
   80cd8:	4403      	add	r3, r0
   80cda:	d407      	bmi.n	80cec <_free_r+0x100>
   80cdc:	f855 5c08 	ldr.w	r5, [r5, #-8]
   80ce0:	1b64      	subs	r4, r4, r5
   80ce2:	68e2      	ldr	r2, [r4, #12]
   80ce4:	68a0      	ldr	r0, [r4, #8]
   80ce6:	442b      	add	r3, r5
   80ce8:	60c2      	str	r2, [r0, #12]
   80cea:	6090      	str	r0, [r2, #8]
   80cec:	4a30      	ldr	r2, [pc, #192]	; (80db0 <_free_r+0x1c4>)
   80cee:	f043 0001 	orr.w	r0, r3, #1
   80cf2:	6812      	ldr	r2, [r2, #0]
   80cf4:	6060      	str	r0, [r4, #4]
   80cf6:	4293      	cmp	r3, r2
   80cf8:	608c      	str	r4, [r1, #8]
   80cfa:	d3b9      	bcc.n	80c70 <_free_r+0x84>
   80cfc:	4b2d      	ldr	r3, [pc, #180]	; (80db4 <_free_r+0x1c8>)
   80cfe:	4640      	mov	r0, r8
   80d00:	6819      	ldr	r1, [r3, #0]
   80d02:	f7ff ff23 	bl	80b4c <_malloc_trim_r>
   80d06:	e7b3      	b.n	80c70 <_free_r+0x84>
   80d08:	4610      	mov	r0, r2
   80d0a:	e7cd      	b.n	80ca8 <_free_r+0xbc>
   80d0c:	1811      	adds	r1, r2, r0
   80d0e:	6849      	ldr	r1, [r1, #4]
   80d10:	07c9      	lsls	r1, r1, #31
   80d12:	d444      	bmi.n	80d9e <_free_r+0x1b2>
   80d14:	6891      	ldr	r1, [r2, #8]
   80d16:	4403      	add	r3, r0
   80d18:	68d2      	ldr	r2, [r2, #12]
   80d1a:	f043 0001 	orr.w	r0, r3, #1
   80d1e:	60ca      	str	r2, [r1, #12]
   80d20:	6091      	str	r1, [r2, #8]
   80d22:	6060      	str	r0, [r4, #4]
   80d24:	50e3      	str	r3, [r4, r3]
   80d26:	e7a3      	b.n	80c70 <_free_r+0x84>
   80d28:	2a14      	cmp	r2, #20
   80d2a:	d816      	bhi.n	80d5a <_free_r+0x16e>
   80d2c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   80d30:	00ff      	lsls	r7, r7, #3
   80d32:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   80d36:	e7aa      	b.n	80c8e <_free_r+0xa2>
   80d38:	2301      	movs	r3, #1
   80d3a:	10aa      	asrs	r2, r5, #2
   80d3c:	684d      	ldr	r5, [r1, #4]
   80d3e:	4093      	lsls	r3, r2
   80d40:	432b      	orrs	r3, r5
   80d42:	604b      	str	r3, [r1, #4]
   80d44:	4603      	mov	r3, r0
   80d46:	e7b0      	b.n	80caa <_free_r+0xbe>
   80d48:	f043 0201 	orr.w	r2, r3, #1
   80d4c:	614c      	str	r4, [r1, #20]
   80d4e:	610c      	str	r4, [r1, #16]
   80d50:	60e5      	str	r5, [r4, #12]
   80d52:	60a5      	str	r5, [r4, #8]
   80d54:	6062      	str	r2, [r4, #4]
   80d56:	50e3      	str	r3, [r4, r3]
   80d58:	e78a      	b.n	80c70 <_free_r+0x84>
   80d5a:	2a54      	cmp	r2, #84	; 0x54
   80d5c:	d806      	bhi.n	80d6c <_free_r+0x180>
   80d5e:	0b1a      	lsrs	r2, r3, #12
   80d60:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   80d64:	00ff      	lsls	r7, r7, #3
   80d66:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   80d6a:	e790      	b.n	80c8e <_free_r+0xa2>
   80d6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   80d70:	d806      	bhi.n	80d80 <_free_r+0x194>
   80d72:	0bda      	lsrs	r2, r3, #15
   80d74:	f102 0778 	add.w	r7, r2, #120	; 0x78
   80d78:	00ff      	lsls	r7, r7, #3
   80d7a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   80d7e:	e786      	b.n	80c8e <_free_r+0xa2>
   80d80:	f240 5054 	movw	r0, #1364	; 0x554
   80d84:	4282      	cmp	r2, r0
   80d86:	d806      	bhi.n	80d96 <_free_r+0x1aa>
   80d88:	0c9a      	lsrs	r2, r3, #18
   80d8a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   80d8e:	00ff      	lsls	r7, r7, #3
   80d90:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   80d94:	e77b      	b.n	80c8e <_free_r+0xa2>
   80d96:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   80d9a:	257e      	movs	r5, #126	; 0x7e
   80d9c:	e777      	b.n	80c8e <_free_r+0xa2>
   80d9e:	f043 0101 	orr.w	r1, r3, #1
   80da2:	6061      	str	r1, [r4, #4]
   80da4:	6013      	str	r3, [r2, #0]
   80da6:	e763      	b.n	80c70 <_free_r+0x84>
   80da8:	20000434 	.word	0x20000434
   80dac:	2000043c 	.word	0x2000043c
   80db0:	20000840 	.word	0x20000840
   80db4:	20000cb4 	.word	0x20000cb4

00080db8 <__sfvwrite_r>:
   80db8:	6893      	ldr	r3, [r2, #8]
   80dba:	2b00      	cmp	r3, #0
   80dbc:	d071      	beq.n	80ea2 <__sfvwrite_r+0xea>
   80dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80dc2:	898b      	ldrh	r3, [r1, #12]
   80dc4:	b083      	sub	sp, #12
   80dc6:	460c      	mov	r4, r1
   80dc8:	0719      	lsls	r1, r3, #28
   80dca:	9000      	str	r0, [sp, #0]
   80dcc:	4616      	mov	r6, r2
   80dce:	d525      	bpl.n	80e1c <__sfvwrite_r+0x64>
   80dd0:	6922      	ldr	r2, [r4, #16]
   80dd2:	b31a      	cbz	r2, 80e1c <__sfvwrite_r+0x64>
   80dd4:	f013 0002 	ands.w	r0, r3, #2
   80dd8:	6835      	ldr	r5, [r6, #0]
   80dda:	d02b      	beq.n	80e34 <__sfvwrite_r+0x7c>
   80ddc:	f04f 0900 	mov.w	r9, #0
   80de0:	46b0      	mov	r8, r6
   80de2:	464f      	mov	r7, r9
   80de4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 810a8 <__sfvwrite_r+0x2f0>
   80de8:	2f00      	cmp	r7, #0
   80dea:	d055      	beq.n	80e98 <__sfvwrite_r+0xe0>
   80dec:	4557      	cmp	r7, sl
   80dee:	463b      	mov	r3, r7
   80df0:	464a      	mov	r2, r9
   80df2:	bf28      	it	cs
   80df4:	4653      	movcs	r3, sl
   80df6:	69e1      	ldr	r1, [r4, #28]
   80df8:	9800      	ldr	r0, [sp, #0]
   80dfa:	6a66      	ldr	r6, [r4, #36]	; 0x24
   80dfc:	47b0      	blx	r6
   80dfe:	2800      	cmp	r0, #0
   80e00:	dd56      	ble.n	80eb0 <__sfvwrite_r+0xf8>
   80e02:	f8d8 3008 	ldr.w	r3, [r8, #8]
   80e06:	4481      	add	r9, r0
   80e08:	1a1b      	subs	r3, r3, r0
   80e0a:	1a3f      	subs	r7, r7, r0
   80e0c:	f8c8 3008 	str.w	r3, [r8, #8]
   80e10:	2b00      	cmp	r3, #0
   80e12:	d1e9      	bne.n	80de8 <__sfvwrite_r+0x30>
   80e14:	2000      	movs	r0, #0
   80e16:	b003      	add	sp, #12
   80e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e1c:	4621      	mov	r1, r4
   80e1e:	9800      	ldr	r0, [sp, #0]
   80e20:	f7ff fcd6 	bl	807d0 <__swsetup_r>
   80e24:	2800      	cmp	r0, #0
   80e26:	f040 8135 	bne.w	81094 <__sfvwrite_r+0x2dc>
   80e2a:	89a3      	ldrh	r3, [r4, #12]
   80e2c:	6835      	ldr	r5, [r6, #0]
   80e2e:	f013 0002 	ands.w	r0, r3, #2
   80e32:	d1d3      	bne.n	80ddc <__sfvwrite_r+0x24>
   80e34:	f013 0901 	ands.w	r9, r3, #1
   80e38:	d144      	bne.n	80ec4 <__sfvwrite_r+0x10c>
   80e3a:	464f      	mov	r7, r9
   80e3c:	9601      	str	r6, [sp, #4]
   80e3e:	b337      	cbz	r7, 80e8e <__sfvwrite_r+0xd6>
   80e40:	059a      	lsls	r2, r3, #22
   80e42:	f8d4 8008 	ldr.w	r8, [r4, #8]
   80e46:	f140 8085 	bpl.w	80f54 <__sfvwrite_r+0x19c>
   80e4a:	4547      	cmp	r7, r8
   80e4c:	46c3      	mov	fp, r8
   80e4e:	f0c0 80ad 	bcc.w	80fac <__sfvwrite_r+0x1f4>
   80e52:	f413 6f90 	tst.w	r3, #1152	; 0x480
   80e56:	f040 80ae 	bne.w	80fb6 <__sfvwrite_r+0x1fe>
   80e5a:	46ba      	mov	sl, r7
   80e5c:	6820      	ldr	r0, [r4, #0]
   80e5e:	465a      	mov	r2, fp
   80e60:	4649      	mov	r1, r9
   80e62:	f000 fd29 	bl	818b8 <memmove>
   80e66:	68a2      	ldr	r2, [r4, #8]
   80e68:	6823      	ldr	r3, [r4, #0]
   80e6a:	eba2 0208 	sub.w	r2, r2, r8
   80e6e:	445b      	add	r3, fp
   80e70:	60a2      	str	r2, [r4, #8]
   80e72:	6023      	str	r3, [r4, #0]
   80e74:	9a01      	ldr	r2, [sp, #4]
   80e76:	44d1      	add	r9, sl
   80e78:	6893      	ldr	r3, [r2, #8]
   80e7a:	eba7 070a 	sub.w	r7, r7, sl
   80e7e:	eba3 030a 	sub.w	r3, r3, sl
   80e82:	6093      	str	r3, [r2, #8]
   80e84:	2b00      	cmp	r3, #0
   80e86:	d0c5      	beq.n	80e14 <__sfvwrite_r+0x5c>
   80e88:	89a3      	ldrh	r3, [r4, #12]
   80e8a:	2f00      	cmp	r7, #0
   80e8c:	d1d8      	bne.n	80e40 <__sfvwrite_r+0x88>
   80e8e:	f8d5 9000 	ldr.w	r9, [r5]
   80e92:	686f      	ldr	r7, [r5, #4]
   80e94:	3508      	adds	r5, #8
   80e96:	e7d2      	b.n	80e3e <__sfvwrite_r+0x86>
   80e98:	f8d5 9000 	ldr.w	r9, [r5]
   80e9c:	686f      	ldr	r7, [r5, #4]
   80e9e:	3508      	adds	r5, #8
   80ea0:	e7a2      	b.n	80de8 <__sfvwrite_r+0x30>
   80ea2:	2000      	movs	r0, #0
   80ea4:	4770      	bx	lr
   80ea6:	4621      	mov	r1, r4
   80ea8:	9800      	ldr	r0, [sp, #0]
   80eaa:	f7ff fda1 	bl	809f0 <_fflush_r>
   80eae:	b378      	cbz	r0, 80f10 <__sfvwrite_r+0x158>
   80eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80eb4:	f04f 30ff 	mov.w	r0, #4294967295
   80eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   80ebc:	81a3      	strh	r3, [r4, #12]
   80ebe:	b003      	add	sp, #12
   80ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ec4:	4681      	mov	r9, r0
   80ec6:	4633      	mov	r3, r6
   80ec8:	464e      	mov	r6, r9
   80eca:	46a8      	mov	r8, r5
   80ecc:	469a      	mov	sl, r3
   80ece:	464d      	mov	r5, r9
   80ed0:	b356      	cbz	r6, 80f28 <__sfvwrite_r+0x170>
   80ed2:	2800      	cmp	r0, #0
   80ed4:	d032      	beq.n	80f3c <__sfvwrite_r+0x184>
   80ed6:	45b1      	cmp	r9, r6
   80ed8:	46cb      	mov	fp, r9
   80eda:	bf28      	it	cs
   80edc:	46b3      	movcs	fp, r6
   80ede:	6820      	ldr	r0, [r4, #0]
   80ee0:	6923      	ldr	r3, [r4, #16]
   80ee2:	465f      	mov	r7, fp
   80ee4:	4298      	cmp	r0, r3
   80ee6:	6962      	ldr	r2, [r4, #20]
   80ee8:	d904      	bls.n	80ef4 <__sfvwrite_r+0x13c>
   80eea:	68a3      	ldr	r3, [r4, #8]
   80eec:	4413      	add	r3, r2
   80eee:	459b      	cmp	fp, r3
   80ef0:	f300 80a8 	bgt.w	81044 <__sfvwrite_r+0x28c>
   80ef4:	4593      	cmp	fp, r2
   80ef6:	db4d      	blt.n	80f94 <__sfvwrite_r+0x1dc>
   80ef8:	4613      	mov	r3, r2
   80efa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   80efc:	462a      	mov	r2, r5
   80efe:	69e1      	ldr	r1, [r4, #28]
   80f00:	9800      	ldr	r0, [sp, #0]
   80f02:	47b8      	blx	r7
   80f04:	1e07      	subs	r7, r0, #0
   80f06:	ddd3      	ble.n	80eb0 <__sfvwrite_r+0xf8>
   80f08:	ebb9 0907 	subs.w	r9, r9, r7
   80f0c:	d0cb      	beq.n	80ea6 <__sfvwrite_r+0xee>
   80f0e:	2001      	movs	r0, #1
   80f10:	f8da 3008 	ldr.w	r3, [sl, #8]
   80f14:	443d      	add	r5, r7
   80f16:	1bdb      	subs	r3, r3, r7
   80f18:	1bf6      	subs	r6, r6, r7
   80f1a:	f8ca 3008 	str.w	r3, [sl, #8]
   80f1e:	2b00      	cmp	r3, #0
   80f20:	f43f af78 	beq.w	80e14 <__sfvwrite_r+0x5c>
   80f24:	2e00      	cmp	r6, #0
   80f26:	d1d4      	bne.n	80ed2 <__sfvwrite_r+0x11a>
   80f28:	f108 0308 	add.w	r3, r8, #8
   80f2c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   80f30:	4698      	mov	r8, r3
   80f32:	f853 5c08 	ldr.w	r5, [r3, #-8]
   80f36:	3308      	adds	r3, #8
   80f38:	2e00      	cmp	r6, #0
   80f3a:	d0f7      	beq.n	80f2c <__sfvwrite_r+0x174>
   80f3c:	4632      	mov	r2, r6
   80f3e:	210a      	movs	r1, #10
   80f40:	4628      	mov	r0, r5
   80f42:	f000 fbfd 	bl	81740 <memchr>
   80f46:	2800      	cmp	r0, #0
   80f48:	f000 80a1 	beq.w	8108e <__sfvwrite_r+0x2d6>
   80f4c:	3001      	adds	r0, #1
   80f4e:	eba0 0905 	sub.w	r9, r0, r5
   80f52:	e7c0      	b.n	80ed6 <__sfvwrite_r+0x11e>
   80f54:	6820      	ldr	r0, [r4, #0]
   80f56:	6923      	ldr	r3, [r4, #16]
   80f58:	4298      	cmp	r0, r3
   80f5a:	d802      	bhi.n	80f62 <__sfvwrite_r+0x1aa>
   80f5c:	6963      	ldr	r3, [r4, #20]
   80f5e:	429f      	cmp	r7, r3
   80f60:	d25d      	bcs.n	8101e <__sfvwrite_r+0x266>
   80f62:	45b8      	cmp	r8, r7
   80f64:	bf28      	it	cs
   80f66:	46b8      	movcs	r8, r7
   80f68:	4649      	mov	r1, r9
   80f6a:	4642      	mov	r2, r8
   80f6c:	f000 fca4 	bl	818b8 <memmove>
   80f70:	68a3      	ldr	r3, [r4, #8]
   80f72:	6822      	ldr	r2, [r4, #0]
   80f74:	eba3 0308 	sub.w	r3, r3, r8
   80f78:	4442      	add	r2, r8
   80f7a:	60a3      	str	r3, [r4, #8]
   80f7c:	6022      	str	r2, [r4, #0]
   80f7e:	b10b      	cbz	r3, 80f84 <__sfvwrite_r+0x1cc>
   80f80:	46c2      	mov	sl, r8
   80f82:	e777      	b.n	80e74 <__sfvwrite_r+0xbc>
   80f84:	4621      	mov	r1, r4
   80f86:	9800      	ldr	r0, [sp, #0]
   80f88:	f7ff fd32 	bl	809f0 <_fflush_r>
   80f8c:	2800      	cmp	r0, #0
   80f8e:	d18f      	bne.n	80eb0 <__sfvwrite_r+0xf8>
   80f90:	46c2      	mov	sl, r8
   80f92:	e76f      	b.n	80e74 <__sfvwrite_r+0xbc>
   80f94:	465a      	mov	r2, fp
   80f96:	4629      	mov	r1, r5
   80f98:	f000 fc8e 	bl	818b8 <memmove>
   80f9c:	68a2      	ldr	r2, [r4, #8]
   80f9e:	6823      	ldr	r3, [r4, #0]
   80fa0:	eba2 020b 	sub.w	r2, r2, fp
   80fa4:	445b      	add	r3, fp
   80fa6:	60a2      	str	r2, [r4, #8]
   80fa8:	6023      	str	r3, [r4, #0]
   80faa:	e7ad      	b.n	80f08 <__sfvwrite_r+0x150>
   80fac:	46b8      	mov	r8, r7
   80fae:	46ba      	mov	sl, r7
   80fb0:	46bb      	mov	fp, r7
   80fb2:	6820      	ldr	r0, [r4, #0]
   80fb4:	e753      	b.n	80e5e <__sfvwrite_r+0xa6>
   80fb6:	6962      	ldr	r2, [r4, #20]
   80fb8:	6820      	ldr	r0, [r4, #0]
   80fba:	6921      	ldr	r1, [r4, #16]
   80fbc:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   80fc0:	eba0 0a01 	sub.w	sl, r0, r1
   80fc4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   80fc8:	f10a 0001 	add.w	r0, sl, #1
   80fcc:	ea4f 0868 	mov.w	r8, r8, asr #1
   80fd0:	4438      	add	r0, r7
   80fd2:	4540      	cmp	r0, r8
   80fd4:	4642      	mov	r2, r8
   80fd6:	bf84      	itt	hi
   80fd8:	4680      	movhi	r8, r0
   80fda:	4642      	movhi	r2, r8
   80fdc:	055b      	lsls	r3, r3, #21
   80fde:	d544      	bpl.n	8106a <__sfvwrite_r+0x2b2>
   80fe0:	4611      	mov	r1, r2
   80fe2:	9800      	ldr	r0, [sp, #0]
   80fe4:	f000 f90a 	bl	811fc <_malloc_r>
   80fe8:	4683      	mov	fp, r0
   80fea:	2800      	cmp	r0, #0
   80fec:	d055      	beq.n	8109a <__sfvwrite_r+0x2e2>
   80fee:	4652      	mov	r2, sl
   80ff0:	6921      	ldr	r1, [r4, #16]
   80ff2:	f000 fbeb 	bl	817cc <memcpy>
   80ff6:	89a3      	ldrh	r3, [r4, #12]
   80ff8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   80ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81000:	81a3      	strh	r3, [r4, #12]
   81002:	eb0b 000a 	add.w	r0, fp, sl
   81006:	eba8 030a 	sub.w	r3, r8, sl
   8100a:	f8c4 b010 	str.w	fp, [r4, #16]
   8100e:	f8c4 8014 	str.w	r8, [r4, #20]
   81012:	6020      	str	r0, [r4, #0]
   81014:	60a3      	str	r3, [r4, #8]
   81016:	46b8      	mov	r8, r7
   81018:	46ba      	mov	sl, r7
   8101a:	46bb      	mov	fp, r7
   8101c:	e71f      	b.n	80e5e <__sfvwrite_r+0xa6>
   8101e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   81022:	42ba      	cmp	r2, r7
   81024:	bf28      	it	cs
   81026:	463a      	movcs	r2, r7
   81028:	fb92 f2f3 	sdiv	r2, r2, r3
   8102c:	69e1      	ldr	r1, [r4, #28]
   8102e:	fb03 f302 	mul.w	r3, r3, r2
   81032:	9800      	ldr	r0, [sp, #0]
   81034:	464a      	mov	r2, r9
   81036:	6a66      	ldr	r6, [r4, #36]	; 0x24
   81038:	47b0      	blx	r6
   8103a:	f1b0 0a00 	subs.w	sl, r0, #0
   8103e:	f73f af19 	bgt.w	80e74 <__sfvwrite_r+0xbc>
   81042:	e735      	b.n	80eb0 <__sfvwrite_r+0xf8>
   81044:	461a      	mov	r2, r3
   81046:	4629      	mov	r1, r5
   81048:	9301      	str	r3, [sp, #4]
   8104a:	f000 fc35 	bl	818b8 <memmove>
   8104e:	6822      	ldr	r2, [r4, #0]
   81050:	9b01      	ldr	r3, [sp, #4]
   81052:	4621      	mov	r1, r4
   81054:	441a      	add	r2, r3
   81056:	6022      	str	r2, [r4, #0]
   81058:	9800      	ldr	r0, [sp, #0]
   8105a:	f7ff fcc9 	bl	809f0 <_fflush_r>
   8105e:	9b01      	ldr	r3, [sp, #4]
   81060:	2800      	cmp	r0, #0
   81062:	f47f af25 	bne.w	80eb0 <__sfvwrite_r+0xf8>
   81066:	461f      	mov	r7, r3
   81068:	e74e      	b.n	80f08 <__sfvwrite_r+0x150>
   8106a:	9800      	ldr	r0, [sp, #0]
   8106c:	f000 fc94 	bl	81998 <_realloc_r>
   81070:	4683      	mov	fp, r0
   81072:	2800      	cmp	r0, #0
   81074:	d1c5      	bne.n	81002 <__sfvwrite_r+0x24a>
   81076:	9d00      	ldr	r5, [sp, #0]
   81078:	6921      	ldr	r1, [r4, #16]
   8107a:	4628      	mov	r0, r5
   8107c:	f7ff fdb6 	bl	80bec <_free_r>
   81080:	220c      	movs	r2, #12
   81082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81086:	602a      	str	r2, [r5, #0]
   81088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8108c:	e712      	b.n	80eb4 <__sfvwrite_r+0xfc>
   8108e:	f106 0901 	add.w	r9, r6, #1
   81092:	e720      	b.n	80ed6 <__sfvwrite_r+0x11e>
   81094:	f04f 30ff 	mov.w	r0, #4294967295
   81098:	e6bd      	b.n	80e16 <__sfvwrite_r+0x5e>
   8109a:	220c      	movs	r2, #12
   8109c:	9900      	ldr	r1, [sp, #0]
   8109e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   810a2:	600a      	str	r2, [r1, #0]
   810a4:	e706      	b.n	80eb4 <__sfvwrite_r+0xfc>
   810a6:	bf00      	nop
   810a8:	7ffffc00 	.word	0x7ffffc00

000810ac <_fwalk_reent>:
   810ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   810b0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   810b4:	d01e      	beq.n	810f4 <_fwalk_reent+0x48>
   810b6:	4688      	mov	r8, r1
   810b8:	4607      	mov	r7, r0
   810ba:	f04f 0900 	mov.w	r9, #0
   810be:	6875      	ldr	r5, [r6, #4]
   810c0:	68b4      	ldr	r4, [r6, #8]
   810c2:	3d01      	subs	r5, #1
   810c4:	d410      	bmi.n	810e8 <_fwalk_reent+0x3c>
   810c6:	89a3      	ldrh	r3, [r4, #12]
   810c8:	3d01      	subs	r5, #1
   810ca:	2b01      	cmp	r3, #1
   810cc:	d908      	bls.n	810e0 <_fwalk_reent+0x34>
   810ce:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   810d2:	3301      	adds	r3, #1
   810d4:	d004      	beq.n	810e0 <_fwalk_reent+0x34>
   810d6:	4621      	mov	r1, r4
   810d8:	4638      	mov	r0, r7
   810da:	47c0      	blx	r8
   810dc:	ea49 0900 	orr.w	r9, r9, r0
   810e0:	1c6b      	adds	r3, r5, #1
   810e2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   810e6:	d1ee      	bne.n	810c6 <_fwalk_reent+0x1a>
   810e8:	6836      	ldr	r6, [r6, #0]
   810ea:	2e00      	cmp	r6, #0
   810ec:	d1e7      	bne.n	810be <_fwalk_reent+0x12>
   810ee:	4648      	mov	r0, r9
   810f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   810f4:	46b1      	mov	r9, r6
   810f6:	4648      	mov	r0, r9
   810f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000810fc <__retarget_lock_init_recursive>:
   810fc:	4770      	bx	lr
   810fe:	bf00      	nop

00081100 <__retarget_lock_close_recursive>:
   81100:	4770      	bx	lr
   81102:	bf00      	nop

00081104 <__retarget_lock_acquire_recursive>:
   81104:	4770      	bx	lr
   81106:	bf00      	nop

00081108 <__retarget_lock_release_recursive>:
   81108:	4770      	bx	lr
   8110a:	bf00      	nop

0008110c <__swhatbuf_r>:
   8110c:	b570      	push	{r4, r5, r6, lr}
   8110e:	460c      	mov	r4, r1
   81110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81114:	b090      	sub	sp, #64	; 0x40
   81116:	2900      	cmp	r1, #0
   81118:	4615      	mov	r5, r2
   8111a:	461e      	mov	r6, r3
   8111c:	db14      	blt.n	81148 <__swhatbuf_r+0x3c>
   8111e:	aa01      	add	r2, sp, #4
   81120:	f000 ff32 	bl	81f88 <_fstat_r>
   81124:	2800      	cmp	r0, #0
   81126:	db0f      	blt.n	81148 <__swhatbuf_r+0x3c>
   81128:	9a02      	ldr	r2, [sp, #8]
   8112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8112e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   81132:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   81136:	fab2 f282 	clz	r2, r2
   8113a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8113e:	0952      	lsrs	r2, r2, #5
   81140:	6032      	str	r2, [r6, #0]
   81142:	602b      	str	r3, [r5, #0]
   81144:	b010      	add	sp, #64	; 0x40
   81146:	bd70      	pop	{r4, r5, r6, pc}
   81148:	2300      	movs	r3, #0
   8114a:	89a2      	ldrh	r2, [r4, #12]
   8114c:	6033      	str	r3, [r6, #0]
   8114e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   81152:	d004      	beq.n	8115e <__swhatbuf_r+0x52>
   81154:	2240      	movs	r2, #64	; 0x40
   81156:	4618      	mov	r0, r3
   81158:	602a      	str	r2, [r5, #0]
   8115a:	b010      	add	sp, #64	; 0x40
   8115c:	bd70      	pop	{r4, r5, r6, pc}
   8115e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81162:	602b      	str	r3, [r5, #0]
   81164:	b010      	add	sp, #64	; 0x40
   81166:	bd70      	pop	{r4, r5, r6, pc}

00081168 <__smakebuf_r>:
   81168:	898a      	ldrh	r2, [r1, #12]
   8116a:	460b      	mov	r3, r1
   8116c:	0792      	lsls	r2, r2, #30
   8116e:	d506      	bpl.n	8117e <__smakebuf_r+0x16>
   81170:	2101      	movs	r1, #1
   81172:	f103 0243 	add.w	r2, r3, #67	; 0x43
   81176:	6159      	str	r1, [r3, #20]
   81178:	601a      	str	r2, [r3, #0]
   8117a:	611a      	str	r2, [r3, #16]
   8117c:	4770      	bx	lr
   8117e:	b5f0      	push	{r4, r5, r6, r7, lr}
   81180:	b083      	sub	sp, #12
   81182:	ab01      	add	r3, sp, #4
   81184:	466a      	mov	r2, sp
   81186:	460c      	mov	r4, r1
   81188:	4606      	mov	r6, r0
   8118a:	f7ff ffbf 	bl	8110c <__swhatbuf_r>
   8118e:	9900      	ldr	r1, [sp, #0]
   81190:	4605      	mov	r5, r0
   81192:	4630      	mov	r0, r6
   81194:	f000 f832 	bl	811fc <_malloc_r>
   81198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8119c:	b1d8      	cbz	r0, 811d6 <__smakebuf_r+0x6e>
   8119e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   811a2:	4f15      	ldr	r7, [pc, #84]	; (811f8 <__smakebuf_r+0x90>)
   811a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   811a8:	63f7      	str	r7, [r6, #60]	; 0x3c
   811aa:	81a3      	strh	r3, [r4, #12]
   811ac:	6020      	str	r0, [r4, #0]
   811ae:	6120      	str	r0, [r4, #16]
   811b0:	6161      	str	r1, [r4, #20]
   811b2:	b91a      	cbnz	r2, 811bc <__smakebuf_r+0x54>
   811b4:	432b      	orrs	r3, r5
   811b6:	81a3      	strh	r3, [r4, #12]
   811b8:	b003      	add	sp, #12
   811ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   811bc:	4630      	mov	r0, r6
   811be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   811c2:	f000 fef5 	bl	81fb0 <_isatty_r>
   811c6:	b1a0      	cbz	r0, 811f2 <__smakebuf_r+0x8a>
   811c8:	89a3      	ldrh	r3, [r4, #12]
   811ca:	f023 0303 	bic.w	r3, r3, #3
   811ce:	f043 0301 	orr.w	r3, r3, #1
   811d2:	b21b      	sxth	r3, r3
   811d4:	e7ee      	b.n	811b4 <__smakebuf_r+0x4c>
   811d6:	059a      	lsls	r2, r3, #22
   811d8:	d4ee      	bmi.n	811b8 <__smakebuf_r+0x50>
   811da:	2101      	movs	r1, #1
   811dc:	f023 0303 	bic.w	r3, r3, #3
   811e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   811e4:	f043 0302 	orr.w	r3, r3, #2
   811e8:	81a3      	strh	r3, [r4, #12]
   811ea:	6161      	str	r1, [r4, #20]
   811ec:	6022      	str	r2, [r4, #0]
   811ee:	6122      	str	r2, [r4, #16]
   811f0:	e7e2      	b.n	811b8 <__smakebuf_r+0x50>
   811f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   811f6:	e7dd      	b.n	811b4 <__smakebuf_r+0x4c>
   811f8:	00080a45 	.word	0x00080a45

000811fc <_malloc_r>:
   811fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81200:	f101 060b 	add.w	r6, r1, #11
   81204:	2e16      	cmp	r6, #22
   81206:	b083      	sub	sp, #12
   81208:	4605      	mov	r5, r0
   8120a:	f240 809e 	bls.w	8134a <_malloc_r+0x14e>
   8120e:	f036 0607 	bics.w	r6, r6, #7
   81212:	f100 80bd 	bmi.w	81390 <_malloc_r+0x194>
   81216:	42b1      	cmp	r1, r6
   81218:	f200 80ba 	bhi.w	81390 <_malloc_r+0x194>
   8121c:	f000 fbb0 	bl	81980 <__malloc_lock>
   81220:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   81224:	f0c0 8285 	bcc.w	81732 <_malloc_r+0x536>
   81228:	0a73      	lsrs	r3, r6, #9
   8122a:	f000 80b8 	beq.w	8139e <_malloc_r+0x1a2>
   8122e:	2b04      	cmp	r3, #4
   81230:	f200 816c 	bhi.w	8150c <_malloc_r+0x310>
   81234:	09b3      	lsrs	r3, r6, #6
   81236:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8123a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8123e:	00c1      	lsls	r1, r0, #3
   81240:	4fb8      	ldr	r7, [pc, #736]	; (81524 <_malloc_r+0x328>)
   81242:	4439      	add	r1, r7
   81244:	684c      	ldr	r4, [r1, #4]
   81246:	3908      	subs	r1, #8
   81248:	42a1      	cmp	r1, r4
   8124a:	d106      	bne.n	8125a <_malloc_r+0x5e>
   8124c:	e00c      	b.n	81268 <_malloc_r+0x6c>
   8124e:	2a00      	cmp	r2, #0
   81250:	f280 80ab 	bge.w	813aa <_malloc_r+0x1ae>
   81254:	68e4      	ldr	r4, [r4, #12]
   81256:	42a1      	cmp	r1, r4
   81258:	d006      	beq.n	81268 <_malloc_r+0x6c>
   8125a:	6863      	ldr	r3, [r4, #4]
   8125c:	f023 0303 	bic.w	r3, r3, #3
   81260:	1b9a      	subs	r2, r3, r6
   81262:	2a0f      	cmp	r2, #15
   81264:	ddf3      	ble.n	8124e <_malloc_r+0x52>
   81266:	4670      	mov	r0, lr
   81268:	693c      	ldr	r4, [r7, #16]
   8126a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 81538 <_malloc_r+0x33c>
   8126e:	4574      	cmp	r4, lr
   81270:	f000 819e 	beq.w	815b0 <_malloc_r+0x3b4>
   81274:	6863      	ldr	r3, [r4, #4]
   81276:	f023 0303 	bic.w	r3, r3, #3
   8127a:	1b9a      	subs	r2, r3, r6
   8127c:	2a0f      	cmp	r2, #15
   8127e:	f300 8183 	bgt.w	81588 <_malloc_r+0x38c>
   81282:	2a00      	cmp	r2, #0
   81284:	f8c7 e014 	str.w	lr, [r7, #20]
   81288:	f8c7 e010 	str.w	lr, [r7, #16]
   8128c:	f280 8091 	bge.w	813b2 <_malloc_r+0x1b6>
   81290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   81294:	f080 8154 	bcs.w	81540 <_malloc_r+0x344>
   81298:	2201      	movs	r2, #1
   8129a:	08db      	lsrs	r3, r3, #3
   8129c:	6879      	ldr	r1, [r7, #4]
   8129e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   812a2:	4413      	add	r3, r2
   812a4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   812a8:	fa02 f20c 	lsl.w	r2, r2, ip
   812ac:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   812b0:	430a      	orrs	r2, r1
   812b2:	f1ac 0108 	sub.w	r1, ip, #8
   812b6:	60e1      	str	r1, [r4, #12]
   812b8:	f8c4 8008 	str.w	r8, [r4, #8]
   812bc:	607a      	str	r2, [r7, #4]
   812be:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   812c2:	f8c8 400c 	str.w	r4, [r8, #12]
   812c6:	2401      	movs	r4, #1
   812c8:	1083      	asrs	r3, r0, #2
   812ca:	409c      	lsls	r4, r3
   812cc:	4294      	cmp	r4, r2
   812ce:	d87d      	bhi.n	813cc <_malloc_r+0x1d0>
   812d0:	4214      	tst	r4, r2
   812d2:	d106      	bne.n	812e2 <_malloc_r+0xe6>
   812d4:	f020 0003 	bic.w	r0, r0, #3
   812d8:	0064      	lsls	r4, r4, #1
   812da:	4214      	tst	r4, r2
   812dc:	f100 0004 	add.w	r0, r0, #4
   812e0:	d0fa      	beq.n	812d8 <_malloc_r+0xdc>
   812e2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   812e6:	46cc      	mov	ip, r9
   812e8:	4680      	mov	r8, r0
   812ea:	f8dc 300c 	ldr.w	r3, [ip, #12]
   812ee:	459c      	cmp	ip, r3
   812f0:	d107      	bne.n	81302 <_malloc_r+0x106>
   812f2:	e15f      	b.n	815b4 <_malloc_r+0x3b8>
   812f4:	2a00      	cmp	r2, #0
   812f6:	f280 816d 	bge.w	815d4 <_malloc_r+0x3d8>
   812fa:	68db      	ldr	r3, [r3, #12]
   812fc:	459c      	cmp	ip, r3
   812fe:	f000 8159 	beq.w	815b4 <_malloc_r+0x3b8>
   81302:	6859      	ldr	r1, [r3, #4]
   81304:	f021 0103 	bic.w	r1, r1, #3
   81308:	1b8a      	subs	r2, r1, r6
   8130a:	2a0f      	cmp	r2, #15
   8130c:	ddf2      	ble.n	812f4 <_malloc_r+0xf8>
   8130e:	68dc      	ldr	r4, [r3, #12]
   81310:	f8d3 c008 	ldr.w	ip, [r3, #8]
   81314:	f046 0801 	orr.w	r8, r6, #1
   81318:	4628      	mov	r0, r5
   8131a:	441e      	add	r6, r3
   8131c:	f042 0501 	orr.w	r5, r2, #1
   81320:	f8c3 8004 	str.w	r8, [r3, #4]
   81324:	f8cc 400c 	str.w	r4, [ip, #12]
   81328:	f8c4 c008 	str.w	ip, [r4, #8]
   8132c:	617e      	str	r6, [r7, #20]
   8132e:	613e      	str	r6, [r7, #16]
   81330:	f8c6 e00c 	str.w	lr, [r6, #12]
   81334:	f8c6 e008 	str.w	lr, [r6, #8]
   81338:	6075      	str	r5, [r6, #4]
   8133a:	505a      	str	r2, [r3, r1]
   8133c:	9300      	str	r3, [sp, #0]
   8133e:	f000 fb25 	bl	8198c <__malloc_unlock>
   81342:	9b00      	ldr	r3, [sp, #0]
   81344:	f103 0408 	add.w	r4, r3, #8
   81348:	e01e      	b.n	81388 <_malloc_r+0x18c>
   8134a:	2910      	cmp	r1, #16
   8134c:	d820      	bhi.n	81390 <_malloc_r+0x194>
   8134e:	f000 fb17 	bl	81980 <__malloc_lock>
   81352:	2610      	movs	r6, #16
   81354:	2318      	movs	r3, #24
   81356:	2002      	movs	r0, #2
   81358:	4f72      	ldr	r7, [pc, #456]	; (81524 <_malloc_r+0x328>)
   8135a:	443b      	add	r3, r7
   8135c:	685c      	ldr	r4, [r3, #4]
   8135e:	f1a3 0208 	sub.w	r2, r3, #8
   81362:	4294      	cmp	r4, r2
   81364:	f000 812f 	beq.w	815c6 <_malloc_r+0x3ca>
   81368:	6863      	ldr	r3, [r4, #4]
   8136a:	68e1      	ldr	r1, [r4, #12]
   8136c:	f023 0303 	bic.w	r3, r3, #3
   81370:	4423      	add	r3, r4
   81372:	685a      	ldr	r2, [r3, #4]
   81374:	68a6      	ldr	r6, [r4, #8]
   81376:	f042 0201 	orr.w	r2, r2, #1
   8137a:	60f1      	str	r1, [r6, #12]
   8137c:	4628      	mov	r0, r5
   8137e:	608e      	str	r6, [r1, #8]
   81380:	605a      	str	r2, [r3, #4]
   81382:	f000 fb03 	bl	8198c <__malloc_unlock>
   81386:	3408      	adds	r4, #8
   81388:	4620      	mov	r0, r4
   8138a:	b003      	add	sp, #12
   8138c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81390:	2400      	movs	r4, #0
   81392:	230c      	movs	r3, #12
   81394:	4620      	mov	r0, r4
   81396:	602b      	str	r3, [r5, #0]
   81398:	b003      	add	sp, #12
   8139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8139e:	2040      	movs	r0, #64	; 0x40
   813a0:	f44f 7100 	mov.w	r1, #512	; 0x200
   813a4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   813a8:	e74a      	b.n	81240 <_malloc_r+0x44>
   813aa:	4423      	add	r3, r4
   813ac:	685a      	ldr	r2, [r3, #4]
   813ae:	68e1      	ldr	r1, [r4, #12]
   813b0:	e7e0      	b.n	81374 <_malloc_r+0x178>
   813b2:	4423      	add	r3, r4
   813b4:	685a      	ldr	r2, [r3, #4]
   813b6:	4628      	mov	r0, r5
   813b8:	f042 0201 	orr.w	r2, r2, #1
   813bc:	605a      	str	r2, [r3, #4]
   813be:	3408      	adds	r4, #8
   813c0:	f000 fae4 	bl	8198c <__malloc_unlock>
   813c4:	4620      	mov	r0, r4
   813c6:	b003      	add	sp, #12
   813c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813cc:	68bc      	ldr	r4, [r7, #8]
   813ce:	6863      	ldr	r3, [r4, #4]
   813d0:	f023 0803 	bic.w	r8, r3, #3
   813d4:	45b0      	cmp	r8, r6
   813d6:	d304      	bcc.n	813e2 <_malloc_r+0x1e6>
   813d8:	eba8 0306 	sub.w	r3, r8, r6
   813dc:	2b0f      	cmp	r3, #15
   813de:	f300 8085 	bgt.w	814ec <_malloc_r+0x2f0>
   813e2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8153c <_malloc_r+0x340>
   813e6:	4b50      	ldr	r3, [pc, #320]	; (81528 <_malloc_r+0x32c>)
   813e8:	f8d9 2000 	ldr.w	r2, [r9]
   813ec:	681b      	ldr	r3, [r3, #0]
   813ee:	3201      	adds	r2, #1
   813f0:	4433      	add	r3, r6
   813f2:	eb04 0a08 	add.w	sl, r4, r8
   813f6:	f000 8154 	beq.w	816a2 <_malloc_r+0x4a6>
   813fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   813fe:	330f      	adds	r3, #15
   81400:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   81404:	f02b 0b0f 	bic.w	fp, fp, #15
   81408:	4659      	mov	r1, fp
   8140a:	4628      	mov	r0, r5
   8140c:	f000 fc7a 	bl	81d04 <_sbrk_r>
   81410:	1c41      	adds	r1, r0, #1
   81412:	4602      	mov	r2, r0
   81414:	f000 80fb 	beq.w	8160e <_malloc_r+0x412>
   81418:	4582      	cmp	sl, r0
   8141a:	f200 80f6 	bhi.w	8160a <_malloc_r+0x40e>
   8141e:	4b43      	ldr	r3, [pc, #268]	; (8152c <_malloc_r+0x330>)
   81420:	6819      	ldr	r1, [r3, #0]
   81422:	4459      	add	r1, fp
   81424:	6019      	str	r1, [r3, #0]
   81426:	f000 814c 	beq.w	816c2 <_malloc_r+0x4c6>
   8142a:	f8d9 0000 	ldr.w	r0, [r9]
   8142e:	3001      	adds	r0, #1
   81430:	bf1b      	ittet	ne
   81432:	eba2 0a0a 	subne.w	sl, r2, sl
   81436:	4451      	addne	r1, sl
   81438:	f8c9 2000 	streq.w	r2, [r9]
   8143c:	6019      	strne	r1, [r3, #0]
   8143e:	f012 0107 	ands.w	r1, r2, #7
   81442:	f000 8114 	beq.w	8166e <_malloc_r+0x472>
   81446:	f1c1 0008 	rsb	r0, r1, #8
   8144a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8144e:	4402      	add	r2, r0
   81450:	3108      	adds	r1, #8
   81452:	eb02 090b 	add.w	r9, r2, fp
   81456:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8145a:	eba1 0909 	sub.w	r9, r1, r9
   8145e:	4649      	mov	r1, r9
   81460:	4628      	mov	r0, r5
   81462:	9301      	str	r3, [sp, #4]
   81464:	9200      	str	r2, [sp, #0]
   81466:	f000 fc4d 	bl	81d04 <_sbrk_r>
   8146a:	1c43      	adds	r3, r0, #1
   8146c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   81470:	f000 8142 	beq.w	816f8 <_malloc_r+0x4fc>
   81474:	1a80      	subs	r0, r0, r2
   81476:	4448      	add	r0, r9
   81478:	f040 0001 	orr.w	r0, r0, #1
   8147c:	6819      	ldr	r1, [r3, #0]
   8147e:	42bc      	cmp	r4, r7
   81480:	4449      	add	r1, r9
   81482:	60ba      	str	r2, [r7, #8]
   81484:	6019      	str	r1, [r3, #0]
   81486:	6050      	str	r0, [r2, #4]
   81488:	d017      	beq.n	814ba <_malloc_r+0x2be>
   8148a:	f1b8 0f0f 	cmp.w	r8, #15
   8148e:	f240 80fa 	bls.w	81686 <_malloc_r+0x48a>
   81492:	f04f 0c05 	mov.w	ip, #5
   81496:	6862      	ldr	r2, [r4, #4]
   81498:	f1a8 000c 	sub.w	r0, r8, #12
   8149c:	f020 0007 	bic.w	r0, r0, #7
   814a0:	f002 0201 	and.w	r2, r2, #1
   814a4:	eb04 0e00 	add.w	lr, r4, r0
   814a8:	4302      	orrs	r2, r0
   814aa:	280f      	cmp	r0, #15
   814ac:	6062      	str	r2, [r4, #4]
   814ae:	f8ce c004 	str.w	ip, [lr, #4]
   814b2:	f8ce c008 	str.w	ip, [lr, #8]
   814b6:	f200 8116 	bhi.w	816e6 <_malloc_r+0x4ea>
   814ba:	4b1d      	ldr	r3, [pc, #116]	; (81530 <_malloc_r+0x334>)
   814bc:	68bc      	ldr	r4, [r7, #8]
   814be:	681a      	ldr	r2, [r3, #0]
   814c0:	4291      	cmp	r1, r2
   814c2:	bf88      	it	hi
   814c4:	6019      	strhi	r1, [r3, #0]
   814c6:	4b1b      	ldr	r3, [pc, #108]	; (81534 <_malloc_r+0x338>)
   814c8:	681a      	ldr	r2, [r3, #0]
   814ca:	4291      	cmp	r1, r2
   814cc:	6862      	ldr	r2, [r4, #4]
   814ce:	bf88      	it	hi
   814d0:	6019      	strhi	r1, [r3, #0]
   814d2:	f022 0203 	bic.w	r2, r2, #3
   814d6:	4296      	cmp	r6, r2
   814d8:	eba2 0306 	sub.w	r3, r2, r6
   814dc:	d801      	bhi.n	814e2 <_malloc_r+0x2e6>
   814de:	2b0f      	cmp	r3, #15
   814e0:	dc04      	bgt.n	814ec <_malloc_r+0x2f0>
   814e2:	4628      	mov	r0, r5
   814e4:	f000 fa52 	bl	8198c <__malloc_unlock>
   814e8:	2400      	movs	r4, #0
   814ea:	e74d      	b.n	81388 <_malloc_r+0x18c>
   814ec:	f046 0201 	orr.w	r2, r6, #1
   814f0:	f043 0301 	orr.w	r3, r3, #1
   814f4:	4426      	add	r6, r4
   814f6:	6062      	str	r2, [r4, #4]
   814f8:	4628      	mov	r0, r5
   814fa:	60be      	str	r6, [r7, #8]
   814fc:	3408      	adds	r4, #8
   814fe:	6073      	str	r3, [r6, #4]
   81500:	f000 fa44 	bl	8198c <__malloc_unlock>
   81504:	4620      	mov	r0, r4
   81506:	b003      	add	sp, #12
   81508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8150c:	2b14      	cmp	r3, #20
   8150e:	d970      	bls.n	815f2 <_malloc_r+0x3f6>
   81510:	2b54      	cmp	r3, #84	; 0x54
   81512:	f200 80a2 	bhi.w	8165a <_malloc_r+0x45e>
   81516:	0b33      	lsrs	r3, r6, #12
   81518:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8151c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   81520:	00c1      	lsls	r1, r0, #3
   81522:	e68d      	b.n	81240 <_malloc_r+0x44>
   81524:	20000434 	.word	0x20000434
   81528:	20000cb4 	.word	0x20000cb4
   8152c:	20000c84 	.word	0x20000c84
   81530:	20000cac 	.word	0x20000cac
   81534:	20000cb0 	.word	0x20000cb0
   81538:	2000043c 	.word	0x2000043c
   8153c:	2000083c 	.word	0x2000083c
   81540:	0a5a      	lsrs	r2, r3, #9
   81542:	2a04      	cmp	r2, #4
   81544:	d95b      	bls.n	815fe <_malloc_r+0x402>
   81546:	2a14      	cmp	r2, #20
   81548:	f200 80ae 	bhi.w	816a8 <_malloc_r+0x4ac>
   8154c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   81550:	00c9      	lsls	r1, r1, #3
   81552:	325b      	adds	r2, #91	; 0x5b
   81554:	eb07 0c01 	add.w	ip, r7, r1
   81558:	5879      	ldr	r1, [r7, r1]
   8155a:	f1ac 0c08 	sub.w	ip, ip, #8
   8155e:	458c      	cmp	ip, r1
   81560:	f000 8088 	beq.w	81674 <_malloc_r+0x478>
   81564:	684a      	ldr	r2, [r1, #4]
   81566:	f022 0203 	bic.w	r2, r2, #3
   8156a:	4293      	cmp	r3, r2
   8156c:	d273      	bcs.n	81656 <_malloc_r+0x45a>
   8156e:	6889      	ldr	r1, [r1, #8]
   81570:	458c      	cmp	ip, r1
   81572:	d1f7      	bne.n	81564 <_malloc_r+0x368>
   81574:	f8dc 300c 	ldr.w	r3, [ip, #12]
   81578:	687a      	ldr	r2, [r7, #4]
   8157a:	60e3      	str	r3, [r4, #12]
   8157c:	f8c4 c008 	str.w	ip, [r4, #8]
   81580:	609c      	str	r4, [r3, #8]
   81582:	f8cc 400c 	str.w	r4, [ip, #12]
   81586:	e69e      	b.n	812c6 <_malloc_r+0xca>
   81588:	f046 0c01 	orr.w	ip, r6, #1
   8158c:	f042 0101 	orr.w	r1, r2, #1
   81590:	4426      	add	r6, r4
   81592:	f8c4 c004 	str.w	ip, [r4, #4]
   81596:	4628      	mov	r0, r5
   81598:	617e      	str	r6, [r7, #20]
   8159a:	613e      	str	r6, [r7, #16]
   8159c:	f8c6 e00c 	str.w	lr, [r6, #12]
   815a0:	f8c6 e008 	str.w	lr, [r6, #8]
   815a4:	6071      	str	r1, [r6, #4]
   815a6:	50e2      	str	r2, [r4, r3]
   815a8:	f000 f9f0 	bl	8198c <__malloc_unlock>
   815ac:	3408      	adds	r4, #8
   815ae:	e6eb      	b.n	81388 <_malloc_r+0x18c>
   815b0:	687a      	ldr	r2, [r7, #4]
   815b2:	e688      	b.n	812c6 <_malloc_r+0xca>
   815b4:	f108 0801 	add.w	r8, r8, #1
   815b8:	f018 0f03 	tst.w	r8, #3
   815bc:	f10c 0c08 	add.w	ip, ip, #8
   815c0:	f47f ae93 	bne.w	812ea <_malloc_r+0xee>
   815c4:	e02d      	b.n	81622 <_malloc_r+0x426>
   815c6:	68dc      	ldr	r4, [r3, #12]
   815c8:	42a3      	cmp	r3, r4
   815ca:	bf08      	it	eq
   815cc:	3002      	addeq	r0, #2
   815ce:	f43f ae4b 	beq.w	81268 <_malloc_r+0x6c>
   815d2:	e6c9      	b.n	81368 <_malloc_r+0x16c>
   815d4:	461c      	mov	r4, r3
   815d6:	4419      	add	r1, r3
   815d8:	684a      	ldr	r2, [r1, #4]
   815da:	68db      	ldr	r3, [r3, #12]
   815dc:	f854 6f08 	ldr.w	r6, [r4, #8]!
   815e0:	f042 0201 	orr.w	r2, r2, #1
   815e4:	604a      	str	r2, [r1, #4]
   815e6:	4628      	mov	r0, r5
   815e8:	60f3      	str	r3, [r6, #12]
   815ea:	609e      	str	r6, [r3, #8]
   815ec:	f000 f9ce 	bl	8198c <__malloc_unlock>
   815f0:	e6ca      	b.n	81388 <_malloc_r+0x18c>
   815f2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   815f6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   815fa:	00c1      	lsls	r1, r0, #3
   815fc:	e620      	b.n	81240 <_malloc_r+0x44>
   815fe:	099a      	lsrs	r2, r3, #6
   81600:	f102 0139 	add.w	r1, r2, #57	; 0x39
   81604:	00c9      	lsls	r1, r1, #3
   81606:	3238      	adds	r2, #56	; 0x38
   81608:	e7a4      	b.n	81554 <_malloc_r+0x358>
   8160a:	42bc      	cmp	r4, r7
   8160c:	d054      	beq.n	816b8 <_malloc_r+0x4bc>
   8160e:	68bc      	ldr	r4, [r7, #8]
   81610:	6862      	ldr	r2, [r4, #4]
   81612:	f022 0203 	bic.w	r2, r2, #3
   81616:	e75e      	b.n	814d6 <_malloc_r+0x2da>
   81618:	f859 3908 	ldr.w	r3, [r9], #-8
   8161c:	4599      	cmp	r9, r3
   8161e:	f040 8086 	bne.w	8172e <_malloc_r+0x532>
   81622:	f010 0f03 	tst.w	r0, #3
   81626:	f100 30ff 	add.w	r0, r0, #4294967295
   8162a:	d1f5      	bne.n	81618 <_malloc_r+0x41c>
   8162c:	687b      	ldr	r3, [r7, #4]
   8162e:	ea23 0304 	bic.w	r3, r3, r4
   81632:	607b      	str	r3, [r7, #4]
   81634:	0064      	lsls	r4, r4, #1
   81636:	429c      	cmp	r4, r3
   81638:	f63f aec8 	bhi.w	813cc <_malloc_r+0x1d0>
   8163c:	2c00      	cmp	r4, #0
   8163e:	f43f aec5 	beq.w	813cc <_malloc_r+0x1d0>
   81642:	421c      	tst	r4, r3
   81644:	4640      	mov	r0, r8
   81646:	f47f ae4c 	bne.w	812e2 <_malloc_r+0xe6>
   8164a:	0064      	lsls	r4, r4, #1
   8164c:	421c      	tst	r4, r3
   8164e:	f100 0004 	add.w	r0, r0, #4
   81652:	d0fa      	beq.n	8164a <_malloc_r+0x44e>
   81654:	e645      	b.n	812e2 <_malloc_r+0xe6>
   81656:	468c      	mov	ip, r1
   81658:	e78c      	b.n	81574 <_malloc_r+0x378>
   8165a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8165e:	d815      	bhi.n	8168c <_malloc_r+0x490>
   81660:	0bf3      	lsrs	r3, r6, #15
   81662:	f103 0078 	add.w	r0, r3, #120	; 0x78
   81666:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8166a:	00c1      	lsls	r1, r0, #3
   8166c:	e5e8      	b.n	81240 <_malloc_r+0x44>
   8166e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81672:	e6ee      	b.n	81452 <_malloc_r+0x256>
   81674:	2101      	movs	r1, #1
   81676:	687b      	ldr	r3, [r7, #4]
   81678:	1092      	asrs	r2, r2, #2
   8167a:	fa01 f202 	lsl.w	r2, r1, r2
   8167e:	431a      	orrs	r2, r3
   81680:	607a      	str	r2, [r7, #4]
   81682:	4663      	mov	r3, ip
   81684:	e779      	b.n	8157a <_malloc_r+0x37e>
   81686:	2301      	movs	r3, #1
   81688:	6053      	str	r3, [r2, #4]
   8168a:	e72a      	b.n	814e2 <_malloc_r+0x2e6>
   8168c:	f240 5254 	movw	r2, #1364	; 0x554
   81690:	4293      	cmp	r3, r2
   81692:	d822      	bhi.n	816da <_malloc_r+0x4de>
   81694:	0cb3      	lsrs	r3, r6, #18
   81696:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8169a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8169e:	00c1      	lsls	r1, r0, #3
   816a0:	e5ce      	b.n	81240 <_malloc_r+0x44>
   816a2:	f103 0b10 	add.w	fp, r3, #16
   816a6:	e6af      	b.n	81408 <_malloc_r+0x20c>
   816a8:	2a54      	cmp	r2, #84	; 0x54
   816aa:	d829      	bhi.n	81700 <_malloc_r+0x504>
   816ac:	0b1a      	lsrs	r2, r3, #12
   816ae:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   816b2:	00c9      	lsls	r1, r1, #3
   816b4:	326e      	adds	r2, #110	; 0x6e
   816b6:	e74d      	b.n	81554 <_malloc_r+0x358>
   816b8:	4b20      	ldr	r3, [pc, #128]	; (8173c <_malloc_r+0x540>)
   816ba:	6819      	ldr	r1, [r3, #0]
   816bc:	4459      	add	r1, fp
   816be:	6019      	str	r1, [r3, #0]
   816c0:	e6b3      	b.n	8142a <_malloc_r+0x22e>
   816c2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   816c6:	2800      	cmp	r0, #0
   816c8:	f47f aeaf 	bne.w	8142a <_malloc_r+0x22e>
   816cc:	eb08 030b 	add.w	r3, r8, fp
   816d0:	68ba      	ldr	r2, [r7, #8]
   816d2:	f043 0301 	orr.w	r3, r3, #1
   816d6:	6053      	str	r3, [r2, #4]
   816d8:	e6ef      	b.n	814ba <_malloc_r+0x2be>
   816da:	207f      	movs	r0, #127	; 0x7f
   816dc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   816e0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   816e4:	e5ac      	b.n	81240 <_malloc_r+0x44>
   816e6:	f104 0108 	add.w	r1, r4, #8
   816ea:	4628      	mov	r0, r5
   816ec:	9300      	str	r3, [sp, #0]
   816ee:	f7ff fa7d 	bl	80bec <_free_r>
   816f2:	9b00      	ldr	r3, [sp, #0]
   816f4:	6819      	ldr	r1, [r3, #0]
   816f6:	e6e0      	b.n	814ba <_malloc_r+0x2be>
   816f8:	2001      	movs	r0, #1
   816fa:	f04f 0900 	mov.w	r9, #0
   816fe:	e6bd      	b.n	8147c <_malloc_r+0x280>
   81700:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   81704:	d805      	bhi.n	81712 <_malloc_r+0x516>
   81706:	0bda      	lsrs	r2, r3, #15
   81708:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8170c:	00c9      	lsls	r1, r1, #3
   8170e:	3277      	adds	r2, #119	; 0x77
   81710:	e720      	b.n	81554 <_malloc_r+0x358>
   81712:	f240 5154 	movw	r1, #1364	; 0x554
   81716:	428a      	cmp	r2, r1
   81718:	d805      	bhi.n	81726 <_malloc_r+0x52a>
   8171a:	0c9a      	lsrs	r2, r3, #18
   8171c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   81720:	00c9      	lsls	r1, r1, #3
   81722:	327c      	adds	r2, #124	; 0x7c
   81724:	e716      	b.n	81554 <_malloc_r+0x358>
   81726:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8172a:	227e      	movs	r2, #126	; 0x7e
   8172c:	e712      	b.n	81554 <_malloc_r+0x358>
   8172e:	687b      	ldr	r3, [r7, #4]
   81730:	e780      	b.n	81634 <_malloc_r+0x438>
   81732:	08f0      	lsrs	r0, r6, #3
   81734:	f106 0308 	add.w	r3, r6, #8
   81738:	e60e      	b.n	81358 <_malloc_r+0x15c>
   8173a:	bf00      	nop
   8173c:	20000c84 	.word	0x20000c84

00081740 <memchr>:
   81740:	0783      	lsls	r3, r0, #30
   81742:	b470      	push	{r4, r5, r6}
   81744:	b2cd      	uxtb	r5, r1
   81746:	d03d      	beq.n	817c4 <memchr+0x84>
   81748:	1e54      	subs	r4, r2, #1
   8174a:	b30a      	cbz	r2, 81790 <memchr+0x50>
   8174c:	7803      	ldrb	r3, [r0, #0]
   8174e:	42ab      	cmp	r3, r5
   81750:	d01f      	beq.n	81792 <memchr+0x52>
   81752:	1c43      	adds	r3, r0, #1
   81754:	e005      	b.n	81762 <memchr+0x22>
   81756:	f114 34ff 	adds.w	r4, r4, #4294967295
   8175a:	d319      	bcc.n	81790 <memchr+0x50>
   8175c:	7802      	ldrb	r2, [r0, #0]
   8175e:	42aa      	cmp	r2, r5
   81760:	d017      	beq.n	81792 <memchr+0x52>
   81762:	f013 0f03 	tst.w	r3, #3
   81766:	4618      	mov	r0, r3
   81768:	f103 0301 	add.w	r3, r3, #1
   8176c:	d1f3      	bne.n	81756 <memchr+0x16>
   8176e:	2c03      	cmp	r4, #3
   81770:	d811      	bhi.n	81796 <memchr+0x56>
   81772:	b34c      	cbz	r4, 817c8 <memchr+0x88>
   81774:	7803      	ldrb	r3, [r0, #0]
   81776:	42ab      	cmp	r3, r5
   81778:	d00b      	beq.n	81792 <memchr+0x52>
   8177a:	4404      	add	r4, r0
   8177c:	1c43      	adds	r3, r0, #1
   8177e:	e002      	b.n	81786 <memchr+0x46>
   81780:	7802      	ldrb	r2, [r0, #0]
   81782:	42aa      	cmp	r2, r5
   81784:	d005      	beq.n	81792 <memchr+0x52>
   81786:	429c      	cmp	r4, r3
   81788:	4618      	mov	r0, r3
   8178a:	f103 0301 	add.w	r3, r3, #1
   8178e:	d1f7      	bne.n	81780 <memchr+0x40>
   81790:	2000      	movs	r0, #0
   81792:	bc70      	pop	{r4, r5, r6}
   81794:	4770      	bx	lr
   81796:	0209      	lsls	r1, r1, #8
   81798:	b289      	uxth	r1, r1
   8179a:	4329      	orrs	r1, r5
   8179c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   817a0:	6803      	ldr	r3, [r0, #0]
   817a2:	4606      	mov	r6, r0
   817a4:	404b      	eors	r3, r1
   817a6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   817aa:	ea22 0303 	bic.w	r3, r2, r3
   817ae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   817b2:	f100 0004 	add.w	r0, r0, #4
   817b6:	d103      	bne.n	817c0 <memchr+0x80>
   817b8:	3c04      	subs	r4, #4
   817ba:	2c03      	cmp	r4, #3
   817bc:	d8f0      	bhi.n	817a0 <memchr+0x60>
   817be:	e7d8      	b.n	81772 <memchr+0x32>
   817c0:	4630      	mov	r0, r6
   817c2:	e7d7      	b.n	81774 <memchr+0x34>
   817c4:	4614      	mov	r4, r2
   817c6:	e7d2      	b.n	8176e <memchr+0x2e>
   817c8:	4620      	mov	r0, r4
   817ca:	e7e2      	b.n	81792 <memchr+0x52>

000817cc <memcpy>:
   817cc:	4684      	mov	ip, r0
   817ce:	ea41 0300 	orr.w	r3, r1, r0
   817d2:	f013 0303 	ands.w	r3, r3, #3
   817d6:	d149      	bne.n	8186c <memcpy+0xa0>
   817d8:	3a40      	subs	r2, #64	; 0x40
   817da:	d323      	bcc.n	81824 <memcpy+0x58>
   817dc:	680b      	ldr	r3, [r1, #0]
   817de:	6003      	str	r3, [r0, #0]
   817e0:	684b      	ldr	r3, [r1, #4]
   817e2:	6043      	str	r3, [r0, #4]
   817e4:	688b      	ldr	r3, [r1, #8]
   817e6:	6083      	str	r3, [r0, #8]
   817e8:	68cb      	ldr	r3, [r1, #12]
   817ea:	60c3      	str	r3, [r0, #12]
   817ec:	690b      	ldr	r3, [r1, #16]
   817ee:	6103      	str	r3, [r0, #16]
   817f0:	694b      	ldr	r3, [r1, #20]
   817f2:	6143      	str	r3, [r0, #20]
   817f4:	698b      	ldr	r3, [r1, #24]
   817f6:	6183      	str	r3, [r0, #24]
   817f8:	69cb      	ldr	r3, [r1, #28]
   817fa:	61c3      	str	r3, [r0, #28]
   817fc:	6a0b      	ldr	r3, [r1, #32]
   817fe:	6203      	str	r3, [r0, #32]
   81800:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81802:	6243      	str	r3, [r0, #36]	; 0x24
   81804:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81806:	6283      	str	r3, [r0, #40]	; 0x28
   81808:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8180a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8180c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8180e:	6303      	str	r3, [r0, #48]	; 0x30
   81810:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81812:	6343      	str	r3, [r0, #52]	; 0x34
   81814:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81816:	6383      	str	r3, [r0, #56]	; 0x38
   81818:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8181a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8181c:	3040      	adds	r0, #64	; 0x40
   8181e:	3140      	adds	r1, #64	; 0x40
   81820:	3a40      	subs	r2, #64	; 0x40
   81822:	d2db      	bcs.n	817dc <memcpy+0x10>
   81824:	3230      	adds	r2, #48	; 0x30
   81826:	d30b      	bcc.n	81840 <memcpy+0x74>
   81828:	680b      	ldr	r3, [r1, #0]
   8182a:	6003      	str	r3, [r0, #0]
   8182c:	684b      	ldr	r3, [r1, #4]
   8182e:	6043      	str	r3, [r0, #4]
   81830:	688b      	ldr	r3, [r1, #8]
   81832:	6083      	str	r3, [r0, #8]
   81834:	68cb      	ldr	r3, [r1, #12]
   81836:	60c3      	str	r3, [r0, #12]
   81838:	3010      	adds	r0, #16
   8183a:	3110      	adds	r1, #16
   8183c:	3a10      	subs	r2, #16
   8183e:	d2f3      	bcs.n	81828 <memcpy+0x5c>
   81840:	320c      	adds	r2, #12
   81842:	d305      	bcc.n	81850 <memcpy+0x84>
   81844:	f851 3b04 	ldr.w	r3, [r1], #4
   81848:	f840 3b04 	str.w	r3, [r0], #4
   8184c:	3a04      	subs	r2, #4
   8184e:	d2f9      	bcs.n	81844 <memcpy+0x78>
   81850:	3204      	adds	r2, #4
   81852:	d008      	beq.n	81866 <memcpy+0x9a>
   81854:	07d2      	lsls	r2, r2, #31
   81856:	bf1c      	itt	ne
   81858:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8185c:	f800 3b01 	strbne.w	r3, [r0], #1
   81860:	d301      	bcc.n	81866 <memcpy+0x9a>
   81862:	880b      	ldrh	r3, [r1, #0]
   81864:	8003      	strh	r3, [r0, #0]
   81866:	4660      	mov	r0, ip
   81868:	4770      	bx	lr
   8186a:	bf00      	nop
   8186c:	2a08      	cmp	r2, #8
   8186e:	d313      	bcc.n	81898 <memcpy+0xcc>
   81870:	078b      	lsls	r3, r1, #30
   81872:	d0b1      	beq.n	817d8 <memcpy+0xc>
   81874:	f010 0303 	ands.w	r3, r0, #3
   81878:	d0ae      	beq.n	817d8 <memcpy+0xc>
   8187a:	f1c3 0304 	rsb	r3, r3, #4
   8187e:	1ad2      	subs	r2, r2, r3
   81880:	07db      	lsls	r3, r3, #31
   81882:	bf1c      	itt	ne
   81884:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81888:	f800 3b01 	strbne.w	r3, [r0], #1
   8188c:	d3a4      	bcc.n	817d8 <memcpy+0xc>
   8188e:	f831 3b02 	ldrh.w	r3, [r1], #2
   81892:	f820 3b02 	strh.w	r3, [r0], #2
   81896:	e79f      	b.n	817d8 <memcpy+0xc>
   81898:	3a04      	subs	r2, #4
   8189a:	d3d9      	bcc.n	81850 <memcpy+0x84>
   8189c:	3a01      	subs	r2, #1
   8189e:	f811 3b01 	ldrb.w	r3, [r1], #1
   818a2:	f800 3b01 	strb.w	r3, [r0], #1
   818a6:	d2f9      	bcs.n	8189c <memcpy+0xd0>
   818a8:	780b      	ldrb	r3, [r1, #0]
   818aa:	7003      	strb	r3, [r0, #0]
   818ac:	784b      	ldrb	r3, [r1, #1]
   818ae:	7043      	strb	r3, [r0, #1]
   818b0:	788b      	ldrb	r3, [r1, #2]
   818b2:	7083      	strb	r3, [r0, #2]
   818b4:	4660      	mov	r0, ip
   818b6:	4770      	bx	lr

000818b8 <memmove>:
   818b8:	4288      	cmp	r0, r1
   818ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   818bc:	d90d      	bls.n	818da <memmove+0x22>
   818be:	188b      	adds	r3, r1, r2
   818c0:	4298      	cmp	r0, r3
   818c2:	d20a      	bcs.n	818da <memmove+0x22>
   818c4:	1884      	adds	r4, r0, r2
   818c6:	2a00      	cmp	r2, #0
   818c8:	d051      	beq.n	8196e <memmove+0xb6>
   818ca:	4622      	mov	r2, r4
   818cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   818d0:	4299      	cmp	r1, r3
   818d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   818d6:	d1f9      	bne.n	818cc <memmove+0x14>
   818d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   818da:	2a0f      	cmp	r2, #15
   818dc:	d948      	bls.n	81970 <memmove+0xb8>
   818de:	ea41 0300 	orr.w	r3, r1, r0
   818e2:	079b      	lsls	r3, r3, #30
   818e4:	d146      	bne.n	81974 <memmove+0xbc>
   818e6:	4615      	mov	r5, r2
   818e8:	f100 0410 	add.w	r4, r0, #16
   818ec:	f101 0310 	add.w	r3, r1, #16
   818f0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   818f4:	3d10      	subs	r5, #16
   818f6:	f844 6c10 	str.w	r6, [r4, #-16]
   818fa:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   818fe:	2d0f      	cmp	r5, #15
   81900:	f844 6c0c 	str.w	r6, [r4, #-12]
   81904:	f853 6c08 	ldr.w	r6, [r3, #-8]
   81908:	f104 0410 	add.w	r4, r4, #16
   8190c:	f844 6c18 	str.w	r6, [r4, #-24]
   81910:	f853 6c04 	ldr.w	r6, [r3, #-4]
   81914:	f103 0310 	add.w	r3, r3, #16
   81918:	f844 6c14 	str.w	r6, [r4, #-20]
   8191c:	d8e8      	bhi.n	818f0 <memmove+0x38>
   8191e:	f1a2 0310 	sub.w	r3, r2, #16
   81922:	f023 030f 	bic.w	r3, r3, #15
   81926:	f002 0e0f 	and.w	lr, r2, #15
   8192a:	3310      	adds	r3, #16
   8192c:	f1be 0f03 	cmp.w	lr, #3
   81930:	4419      	add	r1, r3
   81932:	4403      	add	r3, r0
   81934:	d921      	bls.n	8197a <memmove+0xc2>
   81936:	460e      	mov	r6, r1
   81938:	4674      	mov	r4, lr
   8193a:	1f1d      	subs	r5, r3, #4
   8193c:	f856 7b04 	ldr.w	r7, [r6], #4
   81940:	3c04      	subs	r4, #4
   81942:	2c03      	cmp	r4, #3
   81944:	f845 7f04 	str.w	r7, [r5, #4]!
   81948:	d8f8      	bhi.n	8193c <memmove+0x84>
   8194a:	f1ae 0404 	sub.w	r4, lr, #4
   8194e:	f024 0403 	bic.w	r4, r4, #3
   81952:	3404      	adds	r4, #4
   81954:	4421      	add	r1, r4
   81956:	4423      	add	r3, r4
   81958:	f002 0203 	and.w	r2, r2, #3
   8195c:	b162      	cbz	r2, 81978 <memmove+0xc0>
   8195e:	3b01      	subs	r3, #1
   81960:	440a      	add	r2, r1
   81962:	f811 4b01 	ldrb.w	r4, [r1], #1
   81966:	428a      	cmp	r2, r1
   81968:	f803 4f01 	strb.w	r4, [r3, #1]!
   8196c:	d1f9      	bne.n	81962 <memmove+0xaa>
   8196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81970:	4603      	mov	r3, r0
   81972:	e7f3      	b.n	8195c <memmove+0xa4>
   81974:	4603      	mov	r3, r0
   81976:	e7f2      	b.n	8195e <memmove+0xa6>
   81978:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8197a:	4672      	mov	r2, lr
   8197c:	e7ee      	b.n	8195c <memmove+0xa4>
   8197e:	bf00      	nop

00081980 <__malloc_lock>:
   81980:	4801      	ldr	r0, [pc, #4]	; (81988 <__malloc_lock+0x8>)
   81982:	f7ff bbbf 	b.w	81104 <__retarget_lock_acquire_recursive>
   81986:	bf00      	nop
   81988:	20000cd0 	.word	0x20000cd0

0008198c <__malloc_unlock>:
   8198c:	4801      	ldr	r0, [pc, #4]	; (81994 <__malloc_unlock+0x8>)
   8198e:	f7ff bbbb 	b.w	81108 <__retarget_lock_release_recursive>
   81992:	bf00      	nop
   81994:	20000cd0 	.word	0x20000cd0

00081998 <_realloc_r>:
   81998:	2900      	cmp	r1, #0
   8199a:	f000 8094 	beq.w	81ac6 <_realloc_r+0x12e>
   8199e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   819a2:	460c      	mov	r4, r1
   819a4:	4615      	mov	r5, r2
   819a6:	b083      	sub	sp, #12
   819a8:	4680      	mov	r8, r0
   819aa:	f105 060b 	add.w	r6, r5, #11
   819ae:	f7ff ffe7 	bl	81980 <__malloc_lock>
   819b2:	f854 ec04 	ldr.w	lr, [r4, #-4]
   819b6:	2e16      	cmp	r6, #22
   819b8:	f02e 0703 	bic.w	r7, lr, #3
   819bc:	f1a4 0908 	sub.w	r9, r4, #8
   819c0:	d83c      	bhi.n	81a3c <_realloc_r+0xa4>
   819c2:	2210      	movs	r2, #16
   819c4:	4616      	mov	r6, r2
   819c6:	42b5      	cmp	r5, r6
   819c8:	d83d      	bhi.n	81a46 <_realloc_r+0xae>
   819ca:	4297      	cmp	r7, r2
   819cc:	da43      	bge.n	81a56 <_realloc_r+0xbe>
   819ce:	4bc6      	ldr	r3, [pc, #792]	; (81ce8 <_realloc_r+0x350>)
   819d0:	eb09 0007 	add.w	r0, r9, r7
   819d4:	6899      	ldr	r1, [r3, #8]
   819d6:	4288      	cmp	r0, r1
   819d8:	f000 80c3 	beq.w	81b62 <_realloc_r+0x1ca>
   819dc:	6843      	ldr	r3, [r0, #4]
   819de:	f023 0101 	bic.w	r1, r3, #1
   819e2:	4401      	add	r1, r0
   819e4:	6849      	ldr	r1, [r1, #4]
   819e6:	07c9      	lsls	r1, r1, #31
   819e8:	d54d      	bpl.n	81a86 <_realloc_r+0xee>
   819ea:	f01e 0f01 	tst.w	lr, #1
   819ee:	f000 809b 	beq.w	81b28 <_realloc_r+0x190>
   819f2:	4629      	mov	r1, r5
   819f4:	4640      	mov	r0, r8
   819f6:	f7ff fc01 	bl	811fc <_malloc_r>
   819fa:	4605      	mov	r5, r0
   819fc:	2800      	cmp	r0, #0
   819fe:	d03b      	beq.n	81a78 <_realloc_r+0xe0>
   81a00:	f854 3c04 	ldr.w	r3, [r4, #-4]
   81a04:	f1a0 0208 	sub.w	r2, r0, #8
   81a08:	f023 0301 	bic.w	r3, r3, #1
   81a0c:	444b      	add	r3, r9
   81a0e:	429a      	cmp	r2, r3
   81a10:	f000 812b 	beq.w	81c6a <_realloc_r+0x2d2>
   81a14:	1f3a      	subs	r2, r7, #4
   81a16:	2a24      	cmp	r2, #36	; 0x24
   81a18:	f200 8118 	bhi.w	81c4c <_realloc_r+0x2b4>
   81a1c:	2a13      	cmp	r2, #19
   81a1e:	f200 80eb 	bhi.w	81bf8 <_realloc_r+0x260>
   81a22:	4603      	mov	r3, r0
   81a24:	4622      	mov	r2, r4
   81a26:	6811      	ldr	r1, [r2, #0]
   81a28:	6019      	str	r1, [r3, #0]
   81a2a:	6851      	ldr	r1, [r2, #4]
   81a2c:	6059      	str	r1, [r3, #4]
   81a2e:	6892      	ldr	r2, [r2, #8]
   81a30:	609a      	str	r2, [r3, #8]
   81a32:	4621      	mov	r1, r4
   81a34:	4640      	mov	r0, r8
   81a36:	f7ff f8d9 	bl	80bec <_free_r>
   81a3a:	e01d      	b.n	81a78 <_realloc_r+0xe0>
   81a3c:	f026 0607 	bic.w	r6, r6, #7
   81a40:	2e00      	cmp	r6, #0
   81a42:	4632      	mov	r2, r6
   81a44:	dabf      	bge.n	819c6 <_realloc_r+0x2e>
   81a46:	2500      	movs	r5, #0
   81a48:	230c      	movs	r3, #12
   81a4a:	4628      	mov	r0, r5
   81a4c:	f8c8 3000 	str.w	r3, [r8]
   81a50:	b003      	add	sp, #12
   81a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a56:	4625      	mov	r5, r4
   81a58:	1bbb      	subs	r3, r7, r6
   81a5a:	2b0f      	cmp	r3, #15
   81a5c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   81a60:	d81d      	bhi.n	81a9e <_realloc_r+0x106>
   81a62:	f002 0201 	and.w	r2, r2, #1
   81a66:	433a      	orrs	r2, r7
   81a68:	eb09 0107 	add.w	r1, r9, r7
   81a6c:	f8c9 2004 	str.w	r2, [r9, #4]
   81a70:	684b      	ldr	r3, [r1, #4]
   81a72:	f043 0301 	orr.w	r3, r3, #1
   81a76:	604b      	str	r3, [r1, #4]
   81a78:	4640      	mov	r0, r8
   81a7a:	f7ff ff87 	bl	8198c <__malloc_unlock>
   81a7e:	4628      	mov	r0, r5
   81a80:	b003      	add	sp, #12
   81a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a86:	f023 0303 	bic.w	r3, r3, #3
   81a8a:	18f9      	adds	r1, r7, r3
   81a8c:	4291      	cmp	r1, r2
   81a8e:	db1d      	blt.n	81acc <_realloc_r+0x134>
   81a90:	68c3      	ldr	r3, [r0, #12]
   81a92:	6882      	ldr	r2, [r0, #8]
   81a94:	4625      	mov	r5, r4
   81a96:	60d3      	str	r3, [r2, #12]
   81a98:	460f      	mov	r7, r1
   81a9a:	609a      	str	r2, [r3, #8]
   81a9c:	e7dc      	b.n	81a58 <_realloc_r+0xc0>
   81a9e:	f002 0201 	and.w	r2, r2, #1
   81aa2:	eb09 0106 	add.w	r1, r9, r6
   81aa6:	f043 0301 	orr.w	r3, r3, #1
   81aaa:	4332      	orrs	r2, r6
   81aac:	f8c9 2004 	str.w	r2, [r9, #4]
   81ab0:	444f      	add	r7, r9
   81ab2:	604b      	str	r3, [r1, #4]
   81ab4:	687b      	ldr	r3, [r7, #4]
   81ab6:	3108      	adds	r1, #8
   81ab8:	f043 0301 	orr.w	r3, r3, #1
   81abc:	607b      	str	r3, [r7, #4]
   81abe:	4640      	mov	r0, r8
   81ac0:	f7ff f894 	bl	80bec <_free_r>
   81ac4:	e7d8      	b.n	81a78 <_realloc_r+0xe0>
   81ac6:	4611      	mov	r1, r2
   81ac8:	f7ff bb98 	b.w	811fc <_malloc_r>
   81acc:	f01e 0f01 	tst.w	lr, #1
   81ad0:	d18f      	bne.n	819f2 <_realloc_r+0x5a>
   81ad2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81ad6:	eba9 0a01 	sub.w	sl, r9, r1
   81ada:	f8da 1004 	ldr.w	r1, [sl, #4]
   81ade:	f021 0103 	bic.w	r1, r1, #3
   81ae2:	440b      	add	r3, r1
   81ae4:	443b      	add	r3, r7
   81ae6:	4293      	cmp	r3, r2
   81ae8:	db26      	blt.n	81b38 <_realloc_r+0x1a0>
   81aea:	4655      	mov	r5, sl
   81aec:	68c1      	ldr	r1, [r0, #12]
   81aee:	6880      	ldr	r0, [r0, #8]
   81af0:	1f3a      	subs	r2, r7, #4
   81af2:	60c1      	str	r1, [r0, #12]
   81af4:	6088      	str	r0, [r1, #8]
   81af6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81afa:	f8da 100c 	ldr.w	r1, [sl, #12]
   81afe:	2a24      	cmp	r2, #36	; 0x24
   81b00:	60c1      	str	r1, [r0, #12]
   81b02:	6088      	str	r0, [r1, #8]
   81b04:	d826      	bhi.n	81b54 <_realloc_r+0x1bc>
   81b06:	2a13      	cmp	r2, #19
   81b08:	f240 8081 	bls.w	81c0e <_realloc_r+0x276>
   81b0c:	6821      	ldr	r1, [r4, #0]
   81b0e:	2a1b      	cmp	r2, #27
   81b10:	f8ca 1008 	str.w	r1, [sl, #8]
   81b14:	6861      	ldr	r1, [r4, #4]
   81b16:	f8ca 100c 	str.w	r1, [sl, #12]
   81b1a:	f200 80ad 	bhi.w	81c78 <_realloc_r+0x2e0>
   81b1e:	f104 0008 	add.w	r0, r4, #8
   81b22:	f10a 0210 	add.w	r2, sl, #16
   81b26:	e074      	b.n	81c12 <_realloc_r+0x27a>
   81b28:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81b2c:	eba9 0a03 	sub.w	sl, r9, r3
   81b30:	f8da 1004 	ldr.w	r1, [sl, #4]
   81b34:	f021 0103 	bic.w	r1, r1, #3
   81b38:	187b      	adds	r3, r7, r1
   81b3a:	4293      	cmp	r3, r2
   81b3c:	f6ff af59 	blt.w	819f2 <_realloc_r+0x5a>
   81b40:	4655      	mov	r5, sl
   81b42:	f8da 100c 	ldr.w	r1, [sl, #12]
   81b46:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81b4a:	1f3a      	subs	r2, r7, #4
   81b4c:	2a24      	cmp	r2, #36	; 0x24
   81b4e:	60c1      	str	r1, [r0, #12]
   81b50:	6088      	str	r0, [r1, #8]
   81b52:	d9d8      	bls.n	81b06 <_realloc_r+0x16e>
   81b54:	4621      	mov	r1, r4
   81b56:	4628      	mov	r0, r5
   81b58:	461f      	mov	r7, r3
   81b5a:	46d1      	mov	r9, sl
   81b5c:	f7ff feac 	bl	818b8 <memmove>
   81b60:	e77a      	b.n	81a58 <_realloc_r+0xc0>
   81b62:	6841      	ldr	r1, [r0, #4]
   81b64:	f106 0010 	add.w	r0, r6, #16
   81b68:	f021 0b03 	bic.w	fp, r1, #3
   81b6c:	44bb      	add	fp, r7
   81b6e:	4583      	cmp	fp, r0
   81b70:	da58      	bge.n	81c24 <_realloc_r+0x28c>
   81b72:	f01e 0f01 	tst.w	lr, #1
   81b76:	f47f af3c 	bne.w	819f2 <_realloc_r+0x5a>
   81b7a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   81b7e:	eba9 0a01 	sub.w	sl, r9, r1
   81b82:	f8da 1004 	ldr.w	r1, [sl, #4]
   81b86:	f021 0103 	bic.w	r1, r1, #3
   81b8a:	448b      	add	fp, r1
   81b8c:	4558      	cmp	r0, fp
   81b8e:	dcd3      	bgt.n	81b38 <_realloc_r+0x1a0>
   81b90:	4655      	mov	r5, sl
   81b92:	f8da 100c 	ldr.w	r1, [sl, #12]
   81b96:	f855 0f08 	ldr.w	r0, [r5, #8]!
   81b9a:	1f3a      	subs	r2, r7, #4
   81b9c:	2a24      	cmp	r2, #36	; 0x24
   81b9e:	60c1      	str	r1, [r0, #12]
   81ba0:	6088      	str	r0, [r1, #8]
   81ba2:	f200 808d 	bhi.w	81cc0 <_realloc_r+0x328>
   81ba6:	2a13      	cmp	r2, #19
   81ba8:	f240 8087 	bls.w	81cba <_realloc_r+0x322>
   81bac:	6821      	ldr	r1, [r4, #0]
   81bae:	2a1b      	cmp	r2, #27
   81bb0:	f8ca 1008 	str.w	r1, [sl, #8]
   81bb4:	6861      	ldr	r1, [r4, #4]
   81bb6:	f8ca 100c 	str.w	r1, [sl, #12]
   81bba:	f200 8088 	bhi.w	81cce <_realloc_r+0x336>
   81bbe:	f104 0108 	add.w	r1, r4, #8
   81bc2:	f10a 0210 	add.w	r2, sl, #16
   81bc6:	6808      	ldr	r0, [r1, #0]
   81bc8:	6010      	str	r0, [r2, #0]
   81bca:	6848      	ldr	r0, [r1, #4]
   81bcc:	6050      	str	r0, [r2, #4]
   81bce:	6889      	ldr	r1, [r1, #8]
   81bd0:	6091      	str	r1, [r2, #8]
   81bd2:	ebab 0206 	sub.w	r2, fp, r6
   81bd6:	eb0a 0106 	add.w	r1, sl, r6
   81bda:	f042 0201 	orr.w	r2, r2, #1
   81bde:	6099      	str	r1, [r3, #8]
   81be0:	604a      	str	r2, [r1, #4]
   81be2:	f8da 3004 	ldr.w	r3, [sl, #4]
   81be6:	4640      	mov	r0, r8
   81be8:	f003 0301 	and.w	r3, r3, #1
   81bec:	431e      	orrs	r6, r3
   81bee:	f8ca 6004 	str.w	r6, [sl, #4]
   81bf2:	f7ff fecb 	bl	8198c <__malloc_unlock>
   81bf6:	e742      	b.n	81a7e <_realloc_r+0xe6>
   81bf8:	6823      	ldr	r3, [r4, #0]
   81bfa:	2a1b      	cmp	r2, #27
   81bfc:	6003      	str	r3, [r0, #0]
   81bfe:	6863      	ldr	r3, [r4, #4]
   81c00:	6043      	str	r3, [r0, #4]
   81c02:	d827      	bhi.n	81c54 <_realloc_r+0x2bc>
   81c04:	f100 0308 	add.w	r3, r0, #8
   81c08:	f104 0208 	add.w	r2, r4, #8
   81c0c:	e70b      	b.n	81a26 <_realloc_r+0x8e>
   81c0e:	4620      	mov	r0, r4
   81c10:	462a      	mov	r2, r5
   81c12:	6801      	ldr	r1, [r0, #0]
   81c14:	461f      	mov	r7, r3
   81c16:	6011      	str	r1, [r2, #0]
   81c18:	6841      	ldr	r1, [r0, #4]
   81c1a:	46d1      	mov	r9, sl
   81c1c:	6051      	str	r1, [r2, #4]
   81c1e:	6883      	ldr	r3, [r0, #8]
   81c20:	6093      	str	r3, [r2, #8]
   81c22:	e719      	b.n	81a58 <_realloc_r+0xc0>
   81c24:	ebab 0b06 	sub.w	fp, fp, r6
   81c28:	eb09 0106 	add.w	r1, r9, r6
   81c2c:	f04b 0201 	orr.w	r2, fp, #1
   81c30:	6099      	str	r1, [r3, #8]
   81c32:	604a      	str	r2, [r1, #4]
   81c34:	f854 3c04 	ldr.w	r3, [r4, #-4]
   81c38:	4640      	mov	r0, r8
   81c3a:	f003 0301 	and.w	r3, r3, #1
   81c3e:	431e      	orrs	r6, r3
   81c40:	f844 6c04 	str.w	r6, [r4, #-4]
   81c44:	f7ff fea2 	bl	8198c <__malloc_unlock>
   81c48:	4625      	mov	r5, r4
   81c4a:	e718      	b.n	81a7e <_realloc_r+0xe6>
   81c4c:	4621      	mov	r1, r4
   81c4e:	f7ff fe33 	bl	818b8 <memmove>
   81c52:	e6ee      	b.n	81a32 <_realloc_r+0x9a>
   81c54:	68a3      	ldr	r3, [r4, #8]
   81c56:	2a24      	cmp	r2, #36	; 0x24
   81c58:	6083      	str	r3, [r0, #8]
   81c5a:	68e3      	ldr	r3, [r4, #12]
   81c5c:	60c3      	str	r3, [r0, #12]
   81c5e:	d018      	beq.n	81c92 <_realloc_r+0x2fa>
   81c60:	f100 0310 	add.w	r3, r0, #16
   81c64:	f104 0210 	add.w	r2, r4, #16
   81c68:	e6dd      	b.n	81a26 <_realloc_r+0x8e>
   81c6a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   81c6e:	4625      	mov	r5, r4
   81c70:	f023 0303 	bic.w	r3, r3, #3
   81c74:	441f      	add	r7, r3
   81c76:	e6ef      	b.n	81a58 <_realloc_r+0xc0>
   81c78:	68a1      	ldr	r1, [r4, #8]
   81c7a:	2a24      	cmp	r2, #36	; 0x24
   81c7c:	f8ca 1010 	str.w	r1, [sl, #16]
   81c80:	68e1      	ldr	r1, [r4, #12]
   81c82:	f8ca 1014 	str.w	r1, [sl, #20]
   81c86:	d00d      	beq.n	81ca4 <_realloc_r+0x30c>
   81c88:	f104 0010 	add.w	r0, r4, #16
   81c8c:	f10a 0218 	add.w	r2, sl, #24
   81c90:	e7bf      	b.n	81c12 <_realloc_r+0x27a>
   81c92:	6922      	ldr	r2, [r4, #16]
   81c94:	f100 0318 	add.w	r3, r0, #24
   81c98:	6102      	str	r2, [r0, #16]
   81c9a:	6961      	ldr	r1, [r4, #20]
   81c9c:	f104 0218 	add.w	r2, r4, #24
   81ca0:	6141      	str	r1, [r0, #20]
   81ca2:	e6c0      	b.n	81a26 <_realloc_r+0x8e>
   81ca4:	6922      	ldr	r2, [r4, #16]
   81ca6:	f104 0018 	add.w	r0, r4, #24
   81caa:	f8ca 2018 	str.w	r2, [sl, #24]
   81cae:	6961      	ldr	r1, [r4, #20]
   81cb0:	f10a 0220 	add.w	r2, sl, #32
   81cb4:	f8ca 101c 	str.w	r1, [sl, #28]
   81cb8:	e7ab      	b.n	81c12 <_realloc_r+0x27a>
   81cba:	4621      	mov	r1, r4
   81cbc:	462a      	mov	r2, r5
   81cbe:	e782      	b.n	81bc6 <_realloc_r+0x22e>
   81cc0:	4621      	mov	r1, r4
   81cc2:	4628      	mov	r0, r5
   81cc4:	9301      	str	r3, [sp, #4]
   81cc6:	f7ff fdf7 	bl	818b8 <memmove>
   81cca:	9b01      	ldr	r3, [sp, #4]
   81ccc:	e781      	b.n	81bd2 <_realloc_r+0x23a>
   81cce:	68a1      	ldr	r1, [r4, #8]
   81cd0:	2a24      	cmp	r2, #36	; 0x24
   81cd2:	f8ca 1010 	str.w	r1, [sl, #16]
   81cd6:	68e1      	ldr	r1, [r4, #12]
   81cd8:	f8ca 1014 	str.w	r1, [sl, #20]
   81cdc:	d006      	beq.n	81cec <_realloc_r+0x354>
   81cde:	f104 0110 	add.w	r1, r4, #16
   81ce2:	f10a 0218 	add.w	r2, sl, #24
   81ce6:	e76e      	b.n	81bc6 <_realloc_r+0x22e>
   81ce8:	20000434 	.word	0x20000434
   81cec:	6922      	ldr	r2, [r4, #16]
   81cee:	f104 0118 	add.w	r1, r4, #24
   81cf2:	f8ca 2018 	str.w	r2, [sl, #24]
   81cf6:	6960      	ldr	r0, [r4, #20]
   81cf8:	f10a 0220 	add.w	r2, sl, #32
   81cfc:	f8ca 001c 	str.w	r0, [sl, #28]
   81d00:	e761      	b.n	81bc6 <_realloc_r+0x22e>
   81d02:	bf00      	nop

00081d04 <_sbrk_r>:
   81d04:	b538      	push	{r3, r4, r5, lr}
   81d06:	2300      	movs	r3, #0
   81d08:	4c06      	ldr	r4, [pc, #24]	; (81d24 <_sbrk_r+0x20>)
   81d0a:	4605      	mov	r5, r0
   81d0c:	4608      	mov	r0, r1
   81d0e:	6023      	str	r3, [r4, #0]
   81d10:	f7fe fc18 	bl	80544 <_sbrk>
   81d14:	1c43      	adds	r3, r0, #1
   81d16:	d000      	beq.n	81d1a <_sbrk_r+0x16>
   81d18:	bd38      	pop	{r3, r4, r5, pc}
   81d1a:	6823      	ldr	r3, [r4, #0]
   81d1c:	2b00      	cmp	r3, #0
   81d1e:	d0fb      	beq.n	81d18 <_sbrk_r+0x14>
   81d20:	602b      	str	r3, [r5, #0]
   81d22:	bd38      	pop	{r3, r4, r5, pc}
   81d24:	20000ce4 	.word	0x20000ce4

00081d28 <__sread>:
   81d28:	b510      	push	{r4, lr}
   81d2a:	460c      	mov	r4, r1
   81d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81d30:	f000 f966 	bl	82000 <_read_r>
   81d34:	2800      	cmp	r0, #0
   81d36:	db03      	blt.n	81d40 <__sread+0x18>
   81d38:	6d23      	ldr	r3, [r4, #80]	; 0x50
   81d3a:	4403      	add	r3, r0
   81d3c:	6523      	str	r3, [r4, #80]	; 0x50
   81d3e:	bd10      	pop	{r4, pc}
   81d40:	89a3      	ldrh	r3, [r4, #12]
   81d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   81d46:	81a3      	strh	r3, [r4, #12]
   81d48:	bd10      	pop	{r4, pc}
   81d4a:	bf00      	nop

00081d4c <__swrite>:
   81d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d50:	460c      	mov	r4, r1
   81d52:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   81d56:	461f      	mov	r7, r3
   81d58:	05cb      	lsls	r3, r1, #23
   81d5a:	4616      	mov	r6, r2
   81d5c:	4605      	mov	r5, r0
   81d5e:	d507      	bpl.n	81d70 <__swrite+0x24>
   81d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81d64:	2302      	movs	r3, #2
   81d66:	2200      	movs	r2, #0
   81d68:	f000 f934 	bl	81fd4 <_lseek_r>
   81d6c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   81d70:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   81d74:	81a1      	strh	r1, [r4, #12]
   81d76:	463b      	mov	r3, r7
   81d78:	4632      	mov	r2, r6
   81d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   81d7e:	4628      	mov	r0, r5
   81d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   81d84:	f000 b814 	b.w	81db0 <_write_r>

00081d88 <__sseek>:
   81d88:	b510      	push	{r4, lr}
   81d8a:	460c      	mov	r4, r1
   81d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81d90:	f000 f920 	bl	81fd4 <_lseek_r>
   81d94:	89a3      	ldrh	r3, [r4, #12]
   81d96:	1c42      	adds	r2, r0, #1
   81d98:	bf0e      	itee	eq
   81d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   81d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   81da2:	6520      	strne	r0, [r4, #80]	; 0x50
   81da4:	81a3      	strh	r3, [r4, #12]
   81da6:	bd10      	pop	{r4, pc}

00081da8 <__sclose>:
   81da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   81dac:	f000 b878 	b.w	81ea0 <_close_r>

00081db0 <_write_r>:
   81db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81db2:	460e      	mov	r6, r1
   81db4:	2500      	movs	r5, #0
   81db6:	4c08      	ldr	r4, [pc, #32]	; (81dd8 <_write_r+0x28>)
   81db8:	4611      	mov	r1, r2
   81dba:	4607      	mov	r7, r0
   81dbc:	461a      	mov	r2, r3
   81dbe:	4630      	mov	r0, r6
   81dc0:	6025      	str	r5, [r4, #0]
   81dc2:	f7fe fbe1 	bl	80588 <_write>
   81dc6:	1c43      	adds	r3, r0, #1
   81dc8:	d000      	beq.n	81dcc <_write_r+0x1c>
   81dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81dcc:	6823      	ldr	r3, [r4, #0]
   81dce:	2b00      	cmp	r3, #0
   81dd0:	d0fb      	beq.n	81dca <_write_r+0x1a>
   81dd2:	603b      	str	r3, [r7, #0]
   81dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81dd6:	bf00      	nop
   81dd8:	20000ce4 	.word	0x20000ce4

00081ddc <__register_exitproc>:
   81ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81de0:	4d2c      	ldr	r5, [pc, #176]	; (81e94 <__register_exitproc+0xb8>)
   81de2:	4606      	mov	r6, r0
   81de4:	6828      	ldr	r0, [r5, #0]
   81de6:	4698      	mov	r8, r3
   81de8:	460f      	mov	r7, r1
   81dea:	4691      	mov	r9, r2
   81dec:	f7ff f98a 	bl	81104 <__retarget_lock_acquire_recursive>
   81df0:	4b29      	ldr	r3, [pc, #164]	; (81e98 <__register_exitproc+0xbc>)
   81df2:	681c      	ldr	r4, [r3, #0]
   81df4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81df8:	2b00      	cmp	r3, #0
   81dfa:	d03e      	beq.n	81e7a <__register_exitproc+0x9e>
   81dfc:	685a      	ldr	r2, [r3, #4]
   81dfe:	2a1f      	cmp	r2, #31
   81e00:	dc1c      	bgt.n	81e3c <__register_exitproc+0x60>
   81e02:	f102 0e01 	add.w	lr, r2, #1
   81e06:	b176      	cbz	r6, 81e26 <__register_exitproc+0x4a>
   81e08:	2101      	movs	r1, #1
   81e0a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81e0e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81e12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81e16:	4091      	lsls	r1, r2
   81e18:	4308      	orrs	r0, r1
   81e1a:	2e02      	cmp	r6, #2
   81e1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81e20:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81e24:	d023      	beq.n	81e6e <__register_exitproc+0x92>
   81e26:	3202      	adds	r2, #2
   81e28:	f8c3 e004 	str.w	lr, [r3, #4]
   81e2c:	6828      	ldr	r0, [r5, #0]
   81e2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81e32:	f7ff f969 	bl	81108 <__retarget_lock_release_recursive>
   81e36:	2000      	movs	r0, #0
   81e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81e3c:	4b17      	ldr	r3, [pc, #92]	; (81e9c <__register_exitproc+0xc0>)
   81e3e:	b30b      	cbz	r3, 81e84 <__register_exitproc+0xa8>
   81e40:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81e44:	f3af 8000 	nop.w
   81e48:	4603      	mov	r3, r0
   81e4a:	b1d8      	cbz	r0, 81e84 <__register_exitproc+0xa8>
   81e4c:	2000      	movs	r0, #0
   81e4e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81e52:	f04f 0e01 	mov.w	lr, #1
   81e56:	6058      	str	r0, [r3, #4]
   81e58:	6019      	str	r1, [r3, #0]
   81e5a:	4602      	mov	r2, r0
   81e5c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81e60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81e64:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81e68:	2e00      	cmp	r6, #0
   81e6a:	d0dc      	beq.n	81e26 <__register_exitproc+0x4a>
   81e6c:	e7cc      	b.n	81e08 <__register_exitproc+0x2c>
   81e6e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81e72:	4301      	orrs	r1, r0
   81e74:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81e78:	e7d5      	b.n	81e26 <__register_exitproc+0x4a>
   81e7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81e7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81e82:	e7bb      	b.n	81dfc <__register_exitproc+0x20>
   81e84:	6828      	ldr	r0, [r5, #0]
   81e86:	f7ff f93f 	bl	81108 <__retarget_lock_release_recursive>
   81e8a:	f04f 30ff 	mov.w	r0, #4294967295
   81e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81e92:	bf00      	nop
   81e94:	20000430 	.word	0x20000430
   81e98:	00082048 	.word	0x00082048
   81e9c:	00000000 	.word	0x00000000

00081ea0 <_close_r>:
   81ea0:	b538      	push	{r3, r4, r5, lr}
   81ea2:	2300      	movs	r3, #0
   81ea4:	4c06      	ldr	r4, [pc, #24]	; (81ec0 <_close_r+0x20>)
   81ea6:	4605      	mov	r5, r0
   81ea8:	4608      	mov	r0, r1
   81eaa:	6023      	str	r3, [r4, #0]
   81eac:	f7fe fb60 	bl	80570 <_close>
   81eb0:	1c43      	adds	r3, r0, #1
   81eb2:	d000      	beq.n	81eb6 <_close_r+0x16>
   81eb4:	bd38      	pop	{r3, r4, r5, pc}
   81eb6:	6823      	ldr	r3, [r4, #0]
   81eb8:	2b00      	cmp	r3, #0
   81eba:	d0fb      	beq.n	81eb4 <_close_r+0x14>
   81ebc:	602b      	str	r3, [r5, #0]
   81ebe:	bd38      	pop	{r3, r4, r5, pc}
   81ec0:	20000ce4 	.word	0x20000ce4

00081ec4 <_fclose_r>:
   81ec4:	b570      	push	{r4, r5, r6, lr}
   81ec6:	b159      	cbz	r1, 81ee0 <_fclose_r+0x1c>
   81ec8:	4605      	mov	r5, r0
   81eca:	460c      	mov	r4, r1
   81ecc:	b110      	cbz	r0, 81ed4 <_fclose_r+0x10>
   81ece:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81ed0:	2b00      	cmp	r3, #0
   81ed2:	d03c      	beq.n	81f4e <_fclose_r+0x8a>
   81ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81ed6:	07d8      	lsls	r0, r3, #31
   81ed8:	d505      	bpl.n	81ee6 <_fclose_r+0x22>
   81eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81ede:	b92b      	cbnz	r3, 81eec <_fclose_r+0x28>
   81ee0:	2600      	movs	r6, #0
   81ee2:	4630      	mov	r0, r6
   81ee4:	bd70      	pop	{r4, r5, r6, pc}
   81ee6:	89a3      	ldrh	r3, [r4, #12]
   81ee8:	0599      	lsls	r1, r3, #22
   81eea:	d53c      	bpl.n	81f66 <_fclose_r+0xa2>
   81eec:	4621      	mov	r1, r4
   81eee:	4628      	mov	r0, r5
   81ef0:	f7fe fce2 	bl	808b8 <__sflush_r>
   81ef4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81ef6:	4606      	mov	r6, r0
   81ef8:	b133      	cbz	r3, 81f08 <_fclose_r+0x44>
   81efa:	69e1      	ldr	r1, [r4, #28]
   81efc:	4628      	mov	r0, r5
   81efe:	4798      	blx	r3
   81f00:	2800      	cmp	r0, #0
   81f02:	bfb8      	it	lt
   81f04:	f04f 36ff 	movlt.w	r6, #4294967295
   81f08:	89a3      	ldrh	r3, [r4, #12]
   81f0a:	061a      	lsls	r2, r3, #24
   81f0c:	d422      	bmi.n	81f54 <_fclose_r+0x90>
   81f0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f10:	b141      	cbz	r1, 81f24 <_fclose_r+0x60>
   81f12:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f16:	4299      	cmp	r1, r3
   81f18:	d002      	beq.n	81f20 <_fclose_r+0x5c>
   81f1a:	4628      	mov	r0, r5
   81f1c:	f7fe fe66 	bl	80bec <_free_r>
   81f20:	2300      	movs	r3, #0
   81f22:	6323      	str	r3, [r4, #48]	; 0x30
   81f24:	6c61      	ldr	r1, [r4, #68]	; 0x44
   81f26:	b121      	cbz	r1, 81f32 <_fclose_r+0x6e>
   81f28:	4628      	mov	r0, r5
   81f2a:	f7fe fe5f 	bl	80bec <_free_r>
   81f2e:	2300      	movs	r3, #0
   81f30:	6463      	str	r3, [r4, #68]	; 0x44
   81f32:	f7fe fde5 	bl	80b00 <__sfp_lock_acquire>
   81f36:	2200      	movs	r2, #0
   81f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81f3a:	81a2      	strh	r2, [r4, #12]
   81f3c:	07db      	lsls	r3, r3, #31
   81f3e:	d50e      	bpl.n	81f5e <_fclose_r+0x9a>
   81f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81f42:	f7ff f8dd 	bl	81100 <__retarget_lock_close_recursive>
   81f46:	f7fe fde1 	bl	80b0c <__sfp_lock_release>
   81f4a:	4630      	mov	r0, r6
   81f4c:	bd70      	pop	{r4, r5, r6, pc}
   81f4e:	f7fe fda7 	bl	80aa0 <__sinit>
   81f52:	e7bf      	b.n	81ed4 <_fclose_r+0x10>
   81f54:	6921      	ldr	r1, [r4, #16]
   81f56:	4628      	mov	r0, r5
   81f58:	f7fe fe48 	bl	80bec <_free_r>
   81f5c:	e7d7      	b.n	81f0e <_fclose_r+0x4a>
   81f5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81f60:	f7ff f8d2 	bl	81108 <__retarget_lock_release_recursive>
   81f64:	e7ec      	b.n	81f40 <_fclose_r+0x7c>
   81f66:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81f68:	f7ff f8cc 	bl	81104 <__retarget_lock_acquire_recursive>
   81f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81f70:	2b00      	cmp	r3, #0
   81f72:	d1bb      	bne.n	81eec <_fclose_r+0x28>
   81f74:	6e66      	ldr	r6, [r4, #100]	; 0x64
   81f76:	f016 0601 	ands.w	r6, r6, #1
   81f7a:	d1b1      	bne.n	81ee0 <_fclose_r+0x1c>
   81f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81f7e:	f7ff f8c3 	bl	81108 <__retarget_lock_release_recursive>
   81f82:	4630      	mov	r0, r6
   81f84:	bd70      	pop	{r4, r5, r6, pc}
   81f86:	bf00      	nop

00081f88 <_fstat_r>:
   81f88:	b570      	push	{r4, r5, r6, lr}
   81f8a:	460d      	mov	r5, r1
   81f8c:	2300      	movs	r3, #0
   81f8e:	4c07      	ldr	r4, [pc, #28]	; (81fac <_fstat_r+0x24>)
   81f90:	4606      	mov	r6, r0
   81f92:	4611      	mov	r1, r2
   81f94:	4628      	mov	r0, r5
   81f96:	6023      	str	r3, [r4, #0]
   81f98:	f7fe faed 	bl	80576 <_fstat>
   81f9c:	1c43      	adds	r3, r0, #1
   81f9e:	d000      	beq.n	81fa2 <_fstat_r+0x1a>
   81fa0:	bd70      	pop	{r4, r5, r6, pc}
   81fa2:	6823      	ldr	r3, [r4, #0]
   81fa4:	2b00      	cmp	r3, #0
   81fa6:	d0fb      	beq.n	81fa0 <_fstat_r+0x18>
   81fa8:	6033      	str	r3, [r6, #0]
   81faa:	bd70      	pop	{r4, r5, r6, pc}
   81fac:	20000ce4 	.word	0x20000ce4

00081fb0 <_isatty_r>:
   81fb0:	b538      	push	{r3, r4, r5, lr}
   81fb2:	2300      	movs	r3, #0
   81fb4:	4c06      	ldr	r4, [pc, #24]	; (81fd0 <_isatty_r+0x20>)
   81fb6:	4605      	mov	r5, r0
   81fb8:	4608      	mov	r0, r1
   81fba:	6023      	str	r3, [r4, #0]
   81fbc:	f7fe fae0 	bl	80580 <_isatty>
   81fc0:	1c43      	adds	r3, r0, #1
   81fc2:	d000      	beq.n	81fc6 <_isatty_r+0x16>
   81fc4:	bd38      	pop	{r3, r4, r5, pc}
   81fc6:	6823      	ldr	r3, [r4, #0]
   81fc8:	2b00      	cmp	r3, #0
   81fca:	d0fb      	beq.n	81fc4 <_isatty_r+0x14>
   81fcc:	602b      	str	r3, [r5, #0]
   81fce:	bd38      	pop	{r3, r4, r5, pc}
   81fd0:	20000ce4 	.word	0x20000ce4

00081fd4 <_lseek_r>:
   81fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81fd6:	460e      	mov	r6, r1
   81fd8:	2500      	movs	r5, #0
   81fda:	4c08      	ldr	r4, [pc, #32]	; (81ffc <_lseek_r+0x28>)
   81fdc:	4611      	mov	r1, r2
   81fde:	4607      	mov	r7, r0
   81fe0:	461a      	mov	r2, r3
   81fe2:	4630      	mov	r0, r6
   81fe4:	6025      	str	r5, [r4, #0]
   81fe6:	f7fe facd 	bl	80584 <_lseek>
   81fea:	1c43      	adds	r3, r0, #1
   81fec:	d000      	beq.n	81ff0 <_lseek_r+0x1c>
   81fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81ff0:	6823      	ldr	r3, [r4, #0]
   81ff2:	2b00      	cmp	r3, #0
   81ff4:	d0fb      	beq.n	81fee <_lseek_r+0x1a>
   81ff6:	603b      	str	r3, [r7, #0]
   81ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81ffa:	bf00      	nop
   81ffc:	20000ce4 	.word	0x20000ce4

00082000 <_read_r>:
   82000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82002:	460e      	mov	r6, r1
   82004:	2500      	movs	r5, #0
   82006:	4c08      	ldr	r4, [pc, #32]	; (82028 <_read_r+0x28>)
   82008:	4611      	mov	r1, r2
   8200a:	4607      	mov	r7, r0
   8200c:	461a      	mov	r2, r3
   8200e:	4630      	mov	r0, r6
   82010:	6025      	str	r5, [r4, #0]
   82012:	f7fe facd 	bl	805b0 <_read>
   82016:	1c43      	adds	r3, r0, #1
   82018:	d000      	beq.n	8201c <_read_r+0x1c>
   8201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8201c:	6823      	ldr	r3, [r4, #0]
   8201e:	2b00      	cmp	r3, #0
   82020:	d0fb      	beq.n	8201a <_read_r+0x1a>
   82022:	603b      	str	r3, [r7, #0]
   82024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82026:	bf00      	nop
   82028:	20000ce4 	.word	0x20000ce4
   8202c:	54524155 	.word	0x54524155
   82030:	63657220 	.word	0x63657220
   82034:	65766965 	.word	0x65766965
   82038:	66756220 	.word	0x66756220
   8203c:	20726566 	.word	0x20726566
   82040:	6c6c7566 	.word	0x6c6c7566
   82044:	00000000 	.word	0x00000000

00082048 <_global_impure_ptr>:
   82048:	20000008 0000000a                       ... ....

00082050 <_init>:
   82050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82052:	bf00      	nop
   82054:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82056:	bc08      	pop	{r3}
   82058:	469e      	mov	lr, r3
   8205a:	4770      	bx	lr

0008205c <__init_array_start>:
   8205c:	00080899 	.word	0x00080899

00082060 <__frame_dummy_init_array_entry>:
   82060:	00080119 000803d9                       ........

00082068 <_fini>:
   82068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8206a:	bf00      	nop
   8206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8206e:	bc08      	pop	{r3}
   82070:	469e      	mov	lr, r3
   82072:	4770      	bx	lr

00082074 <__fini_array_start>:
   82074:	000800f5 	.word	0x000800f5
